{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"bf31795bfcd5d15f6ab2635903560ab90bbb7875","modified":1470539939000},{"_id":"source/_posts/2014-06-10-debian75-init.md","hash":"9775323ee1abed7b000084f2e97a7f138f855cdd","modified":1470540194000},{"_id":"source/_posts/2014-06-15-ruby-on-rails-on-debian75.md","hash":"4381ad7e61e2ade3caba7219b7126d0cc2f7b9f6","modified":1470540239000},{"_id":"source/_posts/2014-10-02-journal-20141002.md","hash":"e1e6c3501860b31b7d5c79f814c909777688ff9f","modified":1470540287000},{"_id":"source/_posts/2014-07-23-git-in-svn-repo.md","hash":"e4fe052195414564c960f4c4f40136d5a75e2732","modified":1470540987000},{"_id":"source/_posts/2014-10-05-on-focus.md","hash":"7bb01b2424b8f3ab61404010ace50bf0ce1273cd","modified":1470540309000},{"_id":"source/_posts/2014-12-10-moco-installation.md","hash":"ca33d1a66a77021cc11df5ebbd07fd6be2c3e119","modified":1470540580000},{"_id":"source/_posts/2014-12-10-php-autoloading.md","hash":"3ff46739cc2de41ff38ebd21a564ea4019c56dbd","modified":1470540613000},{"_id":"source/_posts/2015-02-13-php-interview-questions.md","hash":"5556e7ea1c278bb3fe58d65f3c5ffd5a5df146e8","modified":1470540643000},{"_id":"source/_posts/2015-06-25-installing-emacs-on-mac.md","hash":"768f706f611e4053bac452d728d8953c47b7f138","modified":1470540699000},{"_id":"source/_posts/2015-06-25-installing-jekyll.md","hash":"febb98074e3a9e4caebcd50161cec7e567c408b1","modified":1470540714000},{"_id":"source/_posts/2015-06-25-using-git-svn.md","hash":"830b5c8f72a24aed50506fda2583cbe888242cfa","modified":1470540734000},{"_id":"source/_posts/2015-07-15-dired.md","hash":"f0cb8b80afdcc4bc73d03d2a6299baee3a4f96cc","modified":1470540790000},{"_id":"source/_posts/2015-08-14-emacs-projectile.md","hash":"6684fd581f954e5f762e0878720c6f2366c51e8b","modified":1470540814000},{"_id":"source/_posts/2015-08-20-emacs-multi-cursors.md","hash":"ff077ad60df10334b8664d39287c751201893746","modified":1470540958000},{"_id":"source/_posts/2015-08-30-universal-event-logging.md","hash":"8f508fe4c1de492c5b6d3151f4c03a9d52949891","modified":1470540848000},{"_id":"source/_posts/2015-09-06-how-i-work.md","hash":"ae52e73721703fdbf9da55159b977317e684e870","modified":1470540862000},{"_id":"source/_posts/2015-09-27-recovery-from-a-disastrous-git-rebase-mistake.md","hash":"10d74ebc55cbe328d49a164f49adb1525ad25e4a","modified":1470540877000},{"_id":"source/_posts/2015-11-05-vpn-conf-for-gfw.md","hash":"66c28bcaeec393e836e79c6085a8d46ecbb570a8","modified":1470540897000},{"_id":"themes/landscape/.gitignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1470538687000},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1470538687000},{"_id":"themes/landscape/README.md","hash":"c7e83cfe8f2c724fc9cac32bd71bb5faf9ceeddb","modified":1470538687000},{"_id":"themes/landscape/_config.yml","hash":"fb8c98a0f6ff9f962637f329c22699721854cd73","modified":1470538687000},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1470538687000},{"_id":"themes/landscape/package.json","hash":"85358dc34311c6662e841584e206a4679183943f","modified":1470538687000},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1470538687000},{"_id":"themes/landscape/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1470538687000},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1470538687000},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1470538687000},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1470538687000},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1470538687000},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1470538687000},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1470538687000},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1470538687000},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1470538687000},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1470538687000},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1470538687000},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1470538687000},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1470538687000},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1470538687000},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"82a30f81c0e8ba4a8af17acd6cc99e93834e4d5e","modified":1470538687000},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"931aaaffa0910a48199388ede576184ff15793ee","modified":1470538687000},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1470538687000},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"4fe8853e864d192701c03e5cd3a5390287b90612","modified":1470538687000},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1470538687000},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1470538687000},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1470538687000},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"c21ca56f419d01a9f49c27b6be9f4a98402b2aa3","modified":1470538687000},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1470538687000},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1470538687000},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1470538687000},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1470538687000},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1470538687000},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1470538687000},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1470538687000},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1470538687000},{"_id":"themes/landscape/source/css/_variables.styl","hash":"5e37a6571caf87149af83ac1cc0cdef99f117350","modified":1470538687000},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1470538687000},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1470538687000},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1470538687000},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1470538687000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1470538687000},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1470538687000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1470538687000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1470538687000},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1470538687000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1470538687000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1470538687000},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1470538687000},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1470538687000},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1470538687000},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1470538687000},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1470538687000},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1470538687000},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1470538687000},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1470538687000},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1470538687000},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1470538687000},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1470538687000},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1470538687000},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1470538687000},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1470538687000},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1470538687000},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1470538687000},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1470538687000},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1470538687000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1470538687000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1470538687000},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1470538687000},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1470538687000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1470538687000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1470538687000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1470538687000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1470538687000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1470538687000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1470538687000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1470538687000},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1470538687000},{"_id":"public/2015/11/05/vpn-conf-for-gfw/index.html","hash":"21582a888038e217e7d77f094b354dd69961638c","modified":1470541382094},{"_id":"public/2015/09/27/recovery-from-a-disastrous-git-rebase-mistake/index.html","hash":"e9d9ef8f1c2b90ce4e6445e497fb64ee64f9322e","modified":1470541382094},{"_id":"public/2015/09/06/how-i-work/index.html","hash":"f8ae0b33613640678b863435fc6dabcf41336c30","modified":1470541382094},{"_id":"public/2015/08/30/universal-event-logging/index.html","hash":"061e8e2460ac5bbff2970bc1d69da75b30aac7b2","modified":1470541382094},{"_id":"public/2015/08/20/emacs-multi-cursors/index.html","hash":"2f0ca2c36cf09de7e34a8a01a8ae19b0bfdb92f6","modified":1470541382094},{"_id":"public/2015/08/14/emacs-projectile/index.html","hash":"ade0423606c11c10894dc88d7c2d0d9e44f9347e","modified":1470541382094},{"_id":"public/2015/07/25/dired/index.html","hash":"0498751e807d7ebae1d10af7f95c7fc06b0bed1c","modified":1470541382094},{"_id":"public/2015/06/25/installing-jekyll/index.html","hash":"aa95dd35e97cfe2de4bc0c4439a3bc39978556b9","modified":1470541382095},{"_id":"public/2015/06/25/installing-emacs-on-mac/index.html","hash":"58a0160602c6efb0ac152a3c20f8553719606d7b","modified":1470541382095},{"_id":"public/2015/05/25/using-git-svn/index.html","hash":"db808331436740a01206275c3547b1d355c62a22","modified":1470541382095},{"_id":"public/2015/02/13/php-interview-questions/index.html","hash":"b5029f19d2ed4c708f8df608e76ea5bed6e96953","modified":1470541382095},{"_id":"public/2014/12/10/php-autoloading/index.html","hash":"a9e3bbe8acbef5c9a570e962f603546adfc0d11d","modified":1470541382095},{"_id":"public/2014/10/05/on-focus/index.html","hash":"fb67cec80bd914e93ecd830b8e83be16550c6c4e","modified":1470541382095},{"_id":"public/2014/10/02/journal-20141002/index.html","hash":"99f71ec1399a5d74a9bb97e29f6fbd15c0ce1c81","modified":1470541382095},{"_id":"public/2014/07/23/git-in-svn-repo/index.html","hash":"22b2e2c07097f95d66728b1da1aa893e122f3f1b","modified":1470541382095},{"_id":"public/2014/06/15/ruby-on-rails-on-debian75/index.html","hash":"14c072cf7015fdd5fab94f92ed7bea728a2c7349","modified":1470541382095},{"_id":"public/archives/index.html","hash":"bb8bd35834853a7af39784939e01053a1c1f9854","modified":1470541382096},{"_id":"public/archives/page/2/index.html","hash":"449e43f8d85f5dcd2009750bff646d78e28c077c","modified":1470541382096},{"_id":"public/archives/2014/index.html","hash":"7dec68f12956a287417d64ed7f74fb7a5b2dc002","modified":1470541382096},{"_id":"public/archives/2014/06/index.html","hash":"3f3bc308e0bcb146ecf3017caba561be00dd74a9","modified":1470541382096},{"_id":"public/archives/2014/07/index.html","hash":"23020b416b3f8a29fde02b07146217370bad471a","modified":1470541382096},{"_id":"public/archives/2014/10/index.html","hash":"7c9637389f42bd177795f41b347d809ef556c107","modified":1470541382096},{"_id":"public/archives/2014/12/index.html","hash":"3cd7846d284952b094165926efc6149fa658ab6b","modified":1470541382096},{"_id":"public/archives/2015/index.html","hash":"89af4acd351e469c9186a9fc182a6dafbcd31623","modified":1470541382096},{"_id":"public/archives/2015/page/2/index.html","hash":"7db99a44a46763022758d0a2df09e4c23f7f7655","modified":1470541382096},{"_id":"public/archives/2015/02/index.html","hash":"4d3218abb325046cc1f45e437b3100122f48db18","modified":1470541382096},{"_id":"public/archives/2015/06/index.html","hash":"2ef2b54244dc0e5708b4abd1276c6ee9620c0894","modified":1470541382096},{"_id":"public/archives/2015/05/index.html","hash":"c001fadbfbbfd48834cb5dc8f58ea2b382f56862","modified":1470541382096},{"_id":"public/archives/2015/07/index.html","hash":"7c2983e2a622795411dbe80c31875abe2f08eef8","modified":1470541382096},{"_id":"public/archives/2015/08/index.html","hash":"5186602907e08830bdc14c5c648d2459c166162f","modified":1470541382096},{"_id":"public/archives/2015/09/index.html","hash":"35b3e0b8c5a3305a851c614e2704be9ba30aca4b","modified":1470541382096},{"_id":"public/archives/2015/11/index.html","hash":"0db5efad74a41ae475df30ea89928d10bd9ff1d1","modified":1470541382096},{"_id":"public/tags/om/index.html","hash":"3f3bc308e0bcb146ecf3017caba561be00dd74a9","modified":1470541382097},{"_id":"public/tags/linux/index.html","hash":"3f3bc308e0bcb146ecf3017caba561be00dd74a9","modified":1470541382097},{"_id":"public/tags/ruby/index.html","hash":"aab38a4c4a7577cfae3706b25f7fc041fb70ea99","modified":1470541382097},{"_id":"public/tags/iPad/index.html","hash":"a0c90bb7bde13dfd5eedf080866d7855a6b7a5af","modified":1470541382097},{"_id":"public/tags/review/index.html","hash":"a0c90bb7bde13dfd5eedf080866d7855a6b7a5af","modified":1470541382097},{"_id":"public/tags/git/index.html","hash":"05b468326b396a4ef6d112071b3ecdaeef79c564","modified":1470541382097},{"_id":"public/tags/essay/index.html","hash":"6111267fcb5c154a63f7887709dddaf19c501941","modified":1470541382097},{"_id":"public/tags/moco/index.html","hash":"d9777d967a429e0d7b02d88711952226d1d23952","modified":1470541382097},{"_id":"public/tags/php/index.html","hash":"dfc57b0dd2b011de54c07fb80d67f6bd5200a21b","modified":1470541382097},{"_id":"public/tags/emacs/index.html","hash":"75c1593dbe27658022323b1c7d659620576dab1a","modified":1470541382097},{"_id":"public/tags/osx/index.html","hash":"2a17e2c81485bc0492e538d177c43f52a2626103","modified":1470541382097},{"_id":"public/tags/mac/index.html","hash":"755f96254df593d907cb35c163c2e0404fac3ad5","modified":1470541382097},{"_id":"public/tags/software/index.html","hash":"cbec7bba533151424b32b0219bf31fcc67bba8f6","modified":1470541382097},{"_id":"public/tags/jekyll/index.html","hash":"caf643956704483609076c5ee8f9d4af0ff358f3","modified":1470541382097},{"_id":"public/tags/inbox/index.html","hash":"dd95e66c1930915825add165fa23fc307ee5dbbe","modified":1470541382097},{"_id":"public/tags/organize/index.html","hash":"f48a1866c3a6ab862bbd2ed7b40df17190c4b96a","modified":1470541382098},{"_id":"public/tags/vpn/index.html","hash":"0db5efad74a41ae475df30ea89928d10bd9ff1d1","modified":1470541382098},{"_id":"public/tags/gfw/index.html","hash":"0db5efad74a41ae475df30ea89928d10bd9ff1d1","modified":1470541382098},{"_id":"public/2014/12/10/moco-installation/index.html","hash":"49309faef17d2e896df08ba4250743b03cf377a7","modified":1470541382095},{"_id":"public/2014/06/10/debian75-init/index.html","hash":"816908364bf76d3ecedd07f6b277fd748981961c","modified":1470541382095},{"_id":"public/index.html","hash":"8e591f4c90d54bf0ca576fcbfd330fbb31ad5af9","modified":1470541382096},{"_id":"public/page/2/index.html","hash":"017a5eb00208620da9d2c2da3b0f848a6cd323d9","modified":1470541382097},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1470541200506},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1470541200506},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1470541200506},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1470541200507},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1470541200507},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1470541200507},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1470541200507},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1470541200507},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1470541200507},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1470541200507},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1470541201090},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1470541201097},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1470541201097},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1470541201097},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1470541201097},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1470541201097},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1470541201097},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1470541201097},{"_id":"public/css/style.css","hash":"fffb3966bf36057a325498aba9ce3a2ea7bd79e1","modified":1470541201097},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1470541201097},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1470541201097},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1470541201099},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1470541201099},{"_id":"themes/again/README.md","hash":"71396c4147a14f871ebb74f8bc57c7d55a5b7a70","modified":1470541344000},{"_id":"themes/again/_config.yml","hash":"55224a51da90452e899bfe6460418cffe7325f06","modified":1470541344000},{"_id":"themes/again/layout/archive.ejs","hash":"1f8724a48ab2ef61182b8a930e3998f833eb1487","modified":1470541344000},{"_id":"themes/again/layout/index.ejs","hash":"b87edba726df46b991bcaa153c1a222080f991e9","modified":1470541344000},{"_id":"themes/again/layout/layout.ejs","hash":"bfe888472313a2edc8b7db3190b1802d580fc2bd","modified":1470541344000},{"_id":"themes/again/layout/page.ejs","hash":"b1c9235cd9ccff78c4dc15608a708e4a74433d46","modified":1470541344000},{"_id":"themes/again/layout/post.ejs","hash":"fa55c7bed8d3ac20e3911140d5252b9184ca3b14","modified":1470541344000},{"_id":"themes/again/source/favicon.ico","hash":"47f8c468756506ff0c9a1df1dcbc48c1ae54c81d","modified":1470541344000},{"_id":"themes/again/layout/_partial/head.ejs","hash":"90b414e1b02b9d16d13651721043cc2c914f42f4","modified":1470541344000},{"_id":"themes/again/layout/_partial/archive.ejs","hash":"394b6f97a6860fe2e027fd0410e24187f9970d5a","modified":1470541344000},{"_id":"themes/again/layout/_partial/article.ejs","hash":"b65d93599fa7e18af428f31027e915209f1a8c8c","modified":1470541344000},{"_id":"themes/again/layout/_partial/footer.ejs","hash":"5ba7fc1a96449b06759457f95916f530db4b9490","modified":1470541344000},{"_id":"themes/again/layout/_partial/header.ejs","hash":"219c66b37b46bad660099e1516dbb6dcbab0a992","modified":1470541344000},{"_id":"themes/again/layout/_widget/back-to-home.ejs","hash":"6d3544def976676e38e10134cae071f44bbf67d7","modified":1470541344000},{"_id":"themes/again/layout/_partial/index.ejs","hash":"bf9208ec37b0882698d004895631488061f5593e","modified":1470541344000},{"_id":"themes/again/layout/_widget/paginator.ejs","hash":"ed04dbcb0cc79733ac338c3fc2a8604d41eb0848","modified":1470541344000},{"_id":"themes/again/layout/_widget/sharing.ejs","hash":"8d50310cae2bd6531a3ba04b5c5188c616035359","modified":1470541344000},{"_id":"themes/again/layout/_widget/twitter.ejs","hash":"49acef5c7713af0dc27f3aa78b80cb6379d18262","modified":1470541344000},{"_id":"themes/again/layout/_partial/nav.ejs","hash":"9145acd2c9f3fcb5d1ed3d63ad6ad4b8a075b734","modified":1470541344000},{"_id":"themes/again/layout/_widget/disqus.ejs","hash":"47eb63418da61245bf674cb1764419c2741e486b","modified":1470541344000},{"_id":"themes/again/source/css/_base.scss","hash":"095d9f7659f1dfcfd95a894e7c8faaf0de8f6d7c","modified":1470541344000},{"_id":"themes/again/source/css/_font.scss","hash":"3348cde2f82797bd92ab69405824f02472736698","modified":1470541344000},{"_id":"themes/again/source/css/_variables.scss","hash":"643abf9d508a354b2386f47b0a5a5be5beff4e83","modified":1470541344000},{"_id":"themes/again/source/css/app.scss","hash":"7b466635119bfb88c54532f4f88b8f824b5a6666","modified":1470541344000},{"_id":"themes/again/source/images/avatar.png","hash":"60d81ac876c5c4aa0e92dbed5abcdbed357c2bf4","modified":1470541344000},{"_id":"themes/again/source/images/banner-small.png","hash":"4b87b439bbf9507f7bed53d7c2c1a22e07a064e8","modified":1470541344000},{"_id":"themes/again/source/js/app.js","hash":"8e00097211a064209ae0e9fb556920673f5b9a42","modified":1470541344000},{"_id":"themes/again/source/css/_helper/grid.scss","hash":"d290e1315dc8dc3509e26fb5e4ff55eb277e6e84","modified":1470541344000},{"_id":"themes/again/source/css/_helper/index.scss","hash":"8c35cff7ea4785042f6116f28b09ea8ffc087255","modified":1470541344000},{"_id":"themes/again/source/css/_partial/archive.scss","hash":"b358e1a0e51ebea6ea5aee80447644baaa463723","modified":1470541344000},{"_id":"themes/again/source/css/_partial/article.scss","hash":"5e798f7d99baf2b6025c8888bb386eb3f7ae7fb0","modified":1470541344000},{"_id":"themes/again/source/css/_partial/header.scss","hash":"73d105ffe3e48b45f8bb9f18a4fbb843d047eb8d","modified":1470541344000},{"_id":"themes/again/source/css/_partial/footer.scss","hash":"f1ecaa07e5920eede1c2e0b7bfbfe1b3a8f8fb5c","modified":1470541344000},{"_id":"themes/again/source/css/_partial/index.scss","hash":"7498f3c447a5510891fb880d685a39f4791550f0","modified":1470541344000},{"_id":"themes/again/source/css/_partial/nav.scss","hash":"d66e6ae75faaa0bf77c481264e9109714007b1f8","modified":1470541344000},{"_id":"themes/again/source/css/_partial/page.scss","hash":"b576caf22a0d0b9b872ad54dbd0ab2c16a104b86","modified":1470541344000},{"_id":"themes/again/source/css/_partial/partials.scss","hash":"5fd002673fcd254a600b0d034c9eba03033715a4","modified":1470541344000},{"_id":"themes/again/source/css/_widget/back-to-home.scss","hash":"d60425bff8e9cbed9f0f0a9827cbc567f994fb14","modified":1470541344000},{"_id":"themes/again/source/css/_widget/highlight.scss","hash":"5c4fd1e0bb39b3ab7232d650bbbdf50960d960b7","modified":1470541344000},{"_id":"themes/again/source/css/_widget/index.scss","hash":"5de4195cf47963fe68a15e16b7bb067970e0b83c","modified":1470541344000},{"_id":"themes/again/source/css/_widget/sharing.scss","hash":"38f54a9aa48654e4dad44535918550098aa913a6","modified":1470541344000},{"_id":"themes/again/source/images/banner-large.png","hash":"3e91a135ca4c446301995aedc998784e035d485a","modified":1470541344000},{"_id":"public/css/app.scss","hash":"7b466635119bfb88c54532f4f88b8f824b5a6666","modified":1470541382103},{"_id":"public/favicon.ico","hash":"47f8c468756506ff0c9a1df1dcbc48c1ae54c81d","modified":1470541382103},{"_id":"public/images/avatar.png","hash":"60d81ac876c5c4aa0e92dbed5abcdbed357c2bf4","modified":1470541382103},{"_id":"public/images/banner-small.png","hash":"4b87b439bbf9507f7bed53d7c2c1a22e07a064e8","modified":1470541382103},{"_id":"public/js/app.js","hash":"8e00097211a064209ae0e9fb556920673f5b9a42","modified":1470541382112},{"_id":"public/images/banner-large.png","hash":"3e91a135ca4c446301995aedc998784e035d485a","modified":1470541382112}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Debian 7.5 Initialize","date":"2014-06-09T16:00:00.000Z","_content":"\n\n### Initialize\n\n#### Add User\n\n\t# addgroup admin\n\t# useradd -d /home/cauchy -s /bin/bash -m cauchy\n\t# passwd cauchy\n\t# usermod -a -G admin cauchy\n\t# visudo\n\n#### Find This Line\n\n\troot ALL=(ALL:ALL) ALL \n\tafter it add the following line\n\troot ALL=(ALL:ALL) ALL cauchy ALL=(ALL) NOPASSWD: ALL \n\n#### Login as cauchy\n\n\t$ sudo vi /etc/ssh/sshd_config\n\n#### Modify Following Content\n\n\tProtocol 2\n\n\tPermitRootLogin no\n\tPermitEmptyPasswords no\n\tPasswordAuthentication no\n\n\tRSAAuthentication yes\n\tPubkeyAuthentication yes\n\tAuthorizedKeysFile .ssh/authorized_keys\n\n\tUseDNS no\n\tAllowUsers cauchy\n\n\n#### Pubkey Login\n\n\t$ ssh -p12312 cauchy@cauchy.me 'mkdir -p .ssh && cat >> .ssh/authorized_keys' < ~/.ssh/id_rsa.pub\n\n#### Login to cauchy.me again\n\n\t$ sudo chmod 600 ~/.ssh/authorized_keys && chmod 700 ~/.ssh/\n\n#### timezone setup\n\n\t$ tzselect\n\t$ echo \"TZ='Asia/Shanghai'; export TZ\" >> ~/.profile\n\t$ . ~/.profile\n\t$ sudo apt-get update\n\t$ sudo apt-get upgrade\n\n### Install Dropbox\n\t$ cd ~ && wget -O - \"https://www.dropbox.com/download?plat=lnx.x86_64\" | tar xzf -\n\t$ mkdir -p ~/bin && wget -O ~/bin/dropbox.py \"https://www.dropbox.com/download?dl=packages/dropbox.py\"\n\n### Install nginx\n\n#### From Repositories\n\n\t$ sudo apt-get update\n\t$ sudo apt-get upgrade\n\t$ sudo apt-get install nginx\n\n#### From Source Distribution\n\n\t$ sudo apt-get update\n\t$ sudo apt-get upgrade\n\t$ sudo apt-get install libpcre3-dev build-essential libssl-dev\n\t$ cd /opt/\n\t$ sudo wget http://nginx.org/download/nginx-1.5.9.tar.gz\n\t$ sudo tar -zxvf nginx-1.5.9.tar.gz\n\t$ cd /opt/nginx-1.5.9/\n\t$ sudo ./configure --prefix=/opt/nginx --user=nginx --group=nginx --with-http_ssl_module --with-ipv6\n\n##### You should see:\n\n\tnginx path prefix: \"/opt/nginx\"\n\tnginx binary file: \"/opt/nginx/sbin/nginx\"\n\tnginx configuration prefix: \"/opt/nginx/conf\"\n\tnginx configuration file: \"/opt/nginx/conf/nginx.conf\"\n\tnginx pid file: \"/opt/nginx/logs/nginx.pid\"\n\tnginx error log file: \"/opt/nginx/logs/error.log\"\n\tnginx http access log file: \"/opt/nginx/logs/access.log\"\n\tnginx http client request body temporary files: \"client_body_temp\"\n\tnginx http proxy temporary files: \"proxy_temp\"\n\tnginx http fastcgi temporary files: \"fastcgi_temp\"\n\tnginx http uwsgi temporary files: \"uwsgi_temp\"\n\tnginx http scgi temporary files: \"scgi_temp\"\n\n##### Then\n\n\t$ sudo make\n\t$ sudo make install\n\t$ sudo adduser --system --no-create-home --disabled-login --disabled-password --group nginx\n\n#### Create an Init Script to Manage Nginx\n\n\t$ sudo wget -O init-deb.sh http://library.linode.com/assets/1538-init-deb.sh\n\t$ sudo mv init-deb.sh /etc/init.d/nginx\n\t$ sudo chmod +x /etc/init.d/nginx\n\t$ sudo /usr/sbin/update-rc.d -f nginx defaults\n\n#### Edit /etc/init.d/nginx\n\n\tDAEMON=/usr/sbin/nginx\n\n#### Edit /etc/nginx/nginx.conf\n\n\tuser cauchy;\n\n#### Start nginx \n\n\t$ sudo service nginx start\n\n#### Add www folder\n\n\t$ sudo mkdir /var/www\n\t$ sudo chown cauchy:cauchy /var/www\n\n#### Add Virtual Host, edit /etc/nginx/conf.d/vhosts.conf\n\n\tserver {\n\t    listen 80;\n\t    server_name cauchy.com;\n\t    index index.html;\n\t    root /var/www/cauchycai.github.io;\n\t}\n\n### Install jekyll\n\n#### install gem \n\n#### install jekyll\n\n\t$ sudo gem install jekyll\n\n### github config\n\n#### Install git client\n\n\t$ sudo apt-get install git\n\t$ git config --global user.email \"yourname@example.com\"\n\t$ git config --global user.name \"Your Name\"\n\n#### Make sure .ssh/id_rsa.pub does not exist\n\n\t$ cd ~/.ssh\n\t$ ls -al\n\n#### Generate a new SSH key\n\n\t$ ssh-keygen -t rsa -C \"yourname@example.com\"\n\n#### Copy .ssh/id_rsa.pub to github and test\n\n\t$ ssh -T git@github.com\n\n","source":"_posts/2014-06-10-debian75-init.md","raw":"---\ntitle: \"Debian 7.5 Initialize\"\ndate: 2014-06-10 00:00:00\ntags: [om, linux]\n---\n\n\n### Initialize\n\n#### Add User\n\n\t# addgroup admin\n\t# useradd -d /home/cauchy -s /bin/bash -m cauchy\n\t# passwd cauchy\n\t# usermod -a -G admin cauchy\n\t# visudo\n\n#### Find This Line\n\n\troot ALL=(ALL:ALL) ALL \n\tafter it add the following line\n\troot ALL=(ALL:ALL) ALL cauchy ALL=(ALL) NOPASSWD: ALL \n\n#### Login as cauchy\n\n\t$ sudo vi /etc/ssh/sshd_config\n\n#### Modify Following Content\n\n\tProtocol 2\n\n\tPermitRootLogin no\n\tPermitEmptyPasswords no\n\tPasswordAuthentication no\n\n\tRSAAuthentication yes\n\tPubkeyAuthentication yes\n\tAuthorizedKeysFile .ssh/authorized_keys\n\n\tUseDNS no\n\tAllowUsers cauchy\n\n\n#### Pubkey Login\n\n\t$ ssh -p12312 cauchy@cauchy.me 'mkdir -p .ssh && cat >> .ssh/authorized_keys' < ~/.ssh/id_rsa.pub\n\n#### Login to cauchy.me again\n\n\t$ sudo chmod 600 ~/.ssh/authorized_keys && chmod 700 ~/.ssh/\n\n#### timezone setup\n\n\t$ tzselect\n\t$ echo \"TZ='Asia/Shanghai'; export TZ\" >> ~/.profile\n\t$ . ~/.profile\n\t$ sudo apt-get update\n\t$ sudo apt-get upgrade\n\n### Install Dropbox\n\t$ cd ~ && wget -O - \"https://www.dropbox.com/download?plat=lnx.x86_64\" | tar xzf -\n\t$ mkdir -p ~/bin && wget -O ~/bin/dropbox.py \"https://www.dropbox.com/download?dl=packages/dropbox.py\"\n\n### Install nginx\n\n#### From Repositories\n\n\t$ sudo apt-get update\n\t$ sudo apt-get upgrade\n\t$ sudo apt-get install nginx\n\n#### From Source Distribution\n\n\t$ sudo apt-get update\n\t$ sudo apt-get upgrade\n\t$ sudo apt-get install libpcre3-dev build-essential libssl-dev\n\t$ cd /opt/\n\t$ sudo wget http://nginx.org/download/nginx-1.5.9.tar.gz\n\t$ sudo tar -zxvf nginx-1.5.9.tar.gz\n\t$ cd /opt/nginx-1.5.9/\n\t$ sudo ./configure --prefix=/opt/nginx --user=nginx --group=nginx --with-http_ssl_module --with-ipv6\n\n##### You should see:\n\n\tnginx path prefix: \"/opt/nginx\"\n\tnginx binary file: \"/opt/nginx/sbin/nginx\"\n\tnginx configuration prefix: \"/opt/nginx/conf\"\n\tnginx configuration file: \"/opt/nginx/conf/nginx.conf\"\n\tnginx pid file: \"/opt/nginx/logs/nginx.pid\"\n\tnginx error log file: \"/opt/nginx/logs/error.log\"\n\tnginx http access log file: \"/opt/nginx/logs/access.log\"\n\tnginx http client request body temporary files: \"client_body_temp\"\n\tnginx http proxy temporary files: \"proxy_temp\"\n\tnginx http fastcgi temporary files: \"fastcgi_temp\"\n\tnginx http uwsgi temporary files: \"uwsgi_temp\"\n\tnginx http scgi temporary files: \"scgi_temp\"\n\n##### Then\n\n\t$ sudo make\n\t$ sudo make install\n\t$ sudo adduser --system --no-create-home --disabled-login --disabled-password --group nginx\n\n#### Create an Init Script to Manage Nginx\n\n\t$ sudo wget -O init-deb.sh http://library.linode.com/assets/1538-init-deb.sh\n\t$ sudo mv init-deb.sh /etc/init.d/nginx\n\t$ sudo chmod +x /etc/init.d/nginx\n\t$ sudo /usr/sbin/update-rc.d -f nginx defaults\n\n#### Edit /etc/init.d/nginx\n\n\tDAEMON=/usr/sbin/nginx\n\n#### Edit /etc/nginx/nginx.conf\n\n\tuser cauchy;\n\n#### Start nginx \n\n\t$ sudo service nginx start\n\n#### Add www folder\n\n\t$ sudo mkdir /var/www\n\t$ sudo chown cauchy:cauchy /var/www\n\n#### Add Virtual Host, edit /etc/nginx/conf.d/vhosts.conf\n\n\tserver {\n\t    listen 80;\n\t    server_name cauchy.com;\n\t    index index.html;\n\t    root /var/www/cauchycai.github.io;\n\t}\n\n### Install jekyll\n\n#### install gem \n\n#### install jekyll\n\n\t$ sudo gem install jekyll\n\n### github config\n\n#### Install git client\n\n\t$ sudo apt-get install git\n\t$ git config --global user.email \"yourname@example.com\"\n\t$ git config --global user.name \"Your Name\"\n\n#### Make sure .ssh/id_rsa.pub does not exist\n\n\t$ cd ~/.ssh\n\t$ ls -al\n\n#### Generate a new SSH key\n\n\t$ ssh-keygen -t rsa -C \"yourname@example.com\"\n\n#### Copy .ssh/id_rsa.pub to github and test\n\n\t$ ssh -T git@github.com\n\n","slug":"debian75-init","published":1,"updated":"2016-08-07T03:23:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirk26l5u0000jglm2tgwcth0","content":"<h3 id=\"Initialize\"><a href=\"#Initialize\" class=\"headerlink\" title=\"Initialize\"></a>Initialize</h3><h4 id=\"Add-User\"><a href=\"#Add-User\" class=\"headerlink\" title=\"Add User\"></a>Add User</h4><pre><code># addgroup admin\n# useradd -d /home/cauchy -s /bin/bash -m cauchy\n# passwd cauchy\n# usermod -a -G admin cauchy\n# visudo\n</code></pre><h4 id=\"Find-This-Line\"><a href=\"#Find-This-Line\" class=\"headerlink\" title=\"Find This Line\"></a>Find This Line</h4><pre><code>root ALL=(ALL:ALL) ALL \nafter it add the following line\nroot ALL=(ALL:ALL) ALL cauchy ALL=(ALL) NOPASSWD: ALL \n</code></pre><h4 id=\"Login-as-cauchy\"><a href=\"#Login-as-cauchy\" class=\"headerlink\" title=\"Login as cauchy\"></a>Login as cauchy</h4><pre><code>$ sudo vi /etc/ssh/sshd_config\n</code></pre><h4 id=\"Modify-Following-Content\"><a href=\"#Modify-Following-Content\" class=\"headerlink\" title=\"Modify Following Content\"></a>Modify Following Content</h4><pre><code>Protocol 2\n\nPermitRootLogin no\nPermitEmptyPasswords no\nPasswordAuthentication no\n\nRSAAuthentication yes\nPubkeyAuthentication yes\nAuthorizedKeysFile .ssh/authorized_keys\n\nUseDNS no\nAllowUsers cauchy\n</code></pre><h4 id=\"Pubkey-Login\"><a href=\"#Pubkey-Login\" class=\"headerlink\" title=\"Pubkey Login\"></a>Pubkey Login</h4><pre><code>$ ssh -p12312 cauchy@cauchy.me &apos;mkdir -p .ssh &amp;&amp; cat &gt;&gt; .ssh/authorized_keys&apos; &lt; ~/.ssh/id_rsa.pub\n</code></pre><h4 id=\"Login-to-cauchy-me-again\"><a href=\"#Login-to-cauchy-me-again\" class=\"headerlink\" title=\"Login to cauchy.me again\"></a>Login to cauchy.me again</h4><pre><code>$ sudo chmod 600 ~/.ssh/authorized_keys &amp;&amp; chmod 700 ~/.ssh/\n</code></pre><h4 id=\"timezone-setup\"><a href=\"#timezone-setup\" class=\"headerlink\" title=\"timezone setup\"></a>timezone setup</h4><pre><code>$ tzselect\n$ echo &quot;TZ=&apos;Asia/Shanghai&apos;; export TZ&quot; &gt;&gt; ~/.profile\n$ . ~/.profile\n$ sudo apt-get update\n$ sudo apt-get upgrade\n</code></pre><h3 id=\"Install-Dropbox\"><a href=\"#Install-Dropbox\" class=\"headerlink\" title=\"Install Dropbox\"></a>Install Dropbox</h3><pre><code>$ cd ~ &amp;&amp; wget -O - &quot;https://www.dropbox.com/download?plat=lnx.x86_64&quot; | tar xzf -\n$ mkdir -p ~/bin &amp;&amp; wget -O ~/bin/dropbox.py &quot;https://www.dropbox.com/download?dl=packages/dropbox.py&quot;\n</code></pre><h3 id=\"Install-nginx\"><a href=\"#Install-nginx\" class=\"headerlink\" title=\"Install nginx\"></a>Install nginx</h3><h4 id=\"From-Repositories\"><a href=\"#From-Repositories\" class=\"headerlink\" title=\"From Repositories\"></a>From Repositories</h4><pre><code>$ sudo apt-get update\n$ sudo apt-get upgrade\n$ sudo apt-get install nginx\n</code></pre><h4 id=\"From-Source-Distribution\"><a href=\"#From-Source-Distribution\" class=\"headerlink\" title=\"From Source Distribution\"></a>From Source Distribution</h4><pre><code>$ sudo apt-get update\n$ sudo apt-get upgrade\n$ sudo apt-get install libpcre3-dev build-essential libssl-dev\n$ cd /opt/\n$ sudo wget http://nginx.org/download/nginx-1.5.9.tar.gz\n$ sudo tar -zxvf nginx-1.5.9.tar.gz\n$ cd /opt/nginx-1.5.9/\n$ sudo ./configure --prefix=/opt/nginx --user=nginx --group=nginx --with-http_ssl_module --with-ipv6\n</code></pre><h5 id=\"You-should-see\"><a href=\"#You-should-see\" class=\"headerlink\" title=\"You should see:\"></a>You should see:</h5><pre><code>nginx path prefix: &quot;/opt/nginx&quot;\nnginx binary file: &quot;/opt/nginx/sbin/nginx&quot;\nnginx configuration prefix: &quot;/opt/nginx/conf&quot;\nnginx configuration file: &quot;/opt/nginx/conf/nginx.conf&quot;\nnginx pid file: &quot;/opt/nginx/logs/nginx.pid&quot;\nnginx error log file: &quot;/opt/nginx/logs/error.log&quot;\nnginx http access log file: &quot;/opt/nginx/logs/access.log&quot;\nnginx http client request body temporary files: &quot;client_body_temp&quot;\nnginx http proxy temporary files: &quot;proxy_temp&quot;\nnginx http fastcgi temporary files: &quot;fastcgi_temp&quot;\nnginx http uwsgi temporary files: &quot;uwsgi_temp&quot;\nnginx http scgi temporary files: &quot;scgi_temp&quot;\n</code></pre><h5 id=\"Then\"><a href=\"#Then\" class=\"headerlink\" title=\"Then\"></a>Then</h5><pre><code>$ sudo make\n$ sudo make install\n$ sudo adduser --system --no-create-home --disabled-login --disabled-password --group nginx\n</code></pre><h4 id=\"Create-an-Init-Script-to-Manage-Nginx\"><a href=\"#Create-an-Init-Script-to-Manage-Nginx\" class=\"headerlink\" title=\"Create an Init Script to Manage Nginx\"></a>Create an Init Script to Manage Nginx</h4><pre><code>$ sudo wget -O init-deb.sh http://library.linode.com/assets/1538-init-deb.sh\n$ sudo mv init-deb.sh /etc/init.d/nginx\n$ sudo chmod +x /etc/init.d/nginx\n$ sudo /usr/sbin/update-rc.d -f nginx defaults\n</code></pre><h4 id=\"Edit-etc-init-d-nginx\"><a href=\"#Edit-etc-init-d-nginx\" class=\"headerlink\" title=\"Edit /etc/init.d/nginx\"></a>Edit /etc/init.d/nginx</h4><pre><code>DAEMON=/usr/sbin/nginx\n</code></pre><h4 id=\"Edit-etc-nginx-nginx-conf\"><a href=\"#Edit-etc-nginx-nginx-conf\" class=\"headerlink\" title=\"Edit /etc/nginx/nginx.conf\"></a>Edit /etc/nginx/nginx.conf</h4><pre><code>user cauchy;\n</code></pre><h4 id=\"Start-nginx\"><a href=\"#Start-nginx\" class=\"headerlink\" title=\"Start nginx\"></a>Start nginx</h4><pre><code>$ sudo service nginx start\n</code></pre><h4 id=\"Add-www-folder\"><a href=\"#Add-www-folder\" class=\"headerlink\" title=\"Add www folder\"></a>Add www folder</h4><pre><code>$ sudo mkdir /var/www\n$ sudo chown cauchy:cauchy /var/www\n</code></pre><h4 id=\"Add-Virtual-Host-edit-etc-nginx-conf-d-vhosts-conf\"><a href=\"#Add-Virtual-Host-edit-etc-nginx-conf-d-vhosts-conf\" class=\"headerlink\" title=\"Add Virtual Host, edit /etc/nginx/conf.d/vhosts.conf\"></a>Add Virtual Host, edit /etc/nginx/conf.d/vhosts.conf</h4><pre><code>server {\n    listen 80;\n    server_name cauchy.com;\n    index index.html;\n    root /var/www/cauchycai.github.io;\n}\n</code></pre><h3 id=\"Install-jekyll\"><a href=\"#Install-jekyll\" class=\"headerlink\" title=\"Install jekyll\"></a>Install jekyll</h3><h4 id=\"install-gem\"><a href=\"#install-gem\" class=\"headerlink\" title=\"install gem\"></a>install gem</h4><h4 id=\"install-jekyll\"><a href=\"#install-jekyll\" class=\"headerlink\" title=\"install jekyll\"></a>install jekyll</h4><pre><code>$ sudo gem install jekyll\n</code></pre><h3 id=\"github-config\"><a href=\"#github-config\" class=\"headerlink\" title=\"github config\"></a>github config</h3><h4 id=\"Install-git-client\"><a href=\"#Install-git-client\" class=\"headerlink\" title=\"Install git client\"></a>Install git client</h4><pre><code>$ sudo apt-get install git\n$ git config --global user.email &quot;yourname@example.com&quot;\n$ git config --global user.name &quot;Your Name&quot;\n</code></pre><h4 id=\"Make-sure-ssh-id-rsa-pub-does-not-exist\"><a href=\"#Make-sure-ssh-id-rsa-pub-does-not-exist\" class=\"headerlink\" title=\"Make sure .ssh/id_rsa.pub does not exist\"></a>Make sure .ssh/id_rsa.pub does not exist</h4><pre><code>$ cd ~/.ssh\n$ ls -al\n</code></pre><h4 id=\"Generate-a-new-SSH-key\"><a href=\"#Generate-a-new-SSH-key\" class=\"headerlink\" title=\"Generate a new SSH key\"></a>Generate a new SSH key</h4><pre><code>$ ssh-keygen -t rsa -C &quot;yourname@example.com&quot;\n</code></pre><h4 id=\"Copy-ssh-id-rsa-pub-to-github-and-test\"><a href=\"#Copy-ssh-id-rsa-pub-to-github-and-test\" class=\"headerlink\" title=\"Copy .ssh/id_rsa.pub to github and test\"></a>Copy .ssh/id_rsa.pub to github and test</h4><pre><code>$ ssh -T git@github.com\n</code></pre>","excerpt":"","more":"<h3 id=\"Initialize\"><a href=\"#Initialize\" class=\"headerlink\" title=\"Initialize\"></a>Initialize</h3><h4 id=\"Add-User\"><a href=\"#Add-User\" class=\"headerlink\" title=\"Add User\"></a>Add User</h4><pre><code># addgroup admin\n# useradd -d /home/cauchy -s /bin/bash -m cauchy\n# passwd cauchy\n# usermod -a -G admin cauchy\n# visudo\n</code></pre><h4 id=\"Find-This-Line\"><a href=\"#Find-This-Line\" class=\"headerlink\" title=\"Find This Line\"></a>Find This Line</h4><pre><code>root ALL=(ALL:ALL) ALL \nafter it add the following line\nroot ALL=(ALL:ALL) ALL cauchy ALL=(ALL) NOPASSWD: ALL \n</code></pre><h4 id=\"Login-as-cauchy\"><a href=\"#Login-as-cauchy\" class=\"headerlink\" title=\"Login as cauchy\"></a>Login as cauchy</h4><pre><code>$ sudo vi /etc/ssh/sshd_config\n</code></pre><h4 id=\"Modify-Following-Content\"><a href=\"#Modify-Following-Content\" class=\"headerlink\" title=\"Modify Following Content\"></a>Modify Following Content</h4><pre><code>Protocol 2\n\nPermitRootLogin no\nPermitEmptyPasswords no\nPasswordAuthentication no\n\nRSAAuthentication yes\nPubkeyAuthentication yes\nAuthorizedKeysFile .ssh/authorized_keys\n\nUseDNS no\nAllowUsers cauchy\n</code></pre><h4 id=\"Pubkey-Login\"><a href=\"#Pubkey-Login\" class=\"headerlink\" title=\"Pubkey Login\"></a>Pubkey Login</h4><pre><code>$ ssh -p12312 cauchy@cauchy.me &apos;mkdir -p .ssh &amp;&amp; cat &gt;&gt; .ssh/authorized_keys&apos; &lt; ~/.ssh/id_rsa.pub\n</code></pre><h4 id=\"Login-to-cauchy-me-again\"><a href=\"#Login-to-cauchy-me-again\" class=\"headerlink\" title=\"Login to cauchy.me again\"></a>Login to cauchy.me again</h4><pre><code>$ sudo chmod 600 ~/.ssh/authorized_keys &amp;&amp; chmod 700 ~/.ssh/\n</code></pre><h4 id=\"timezone-setup\"><a href=\"#timezone-setup\" class=\"headerlink\" title=\"timezone setup\"></a>timezone setup</h4><pre><code>$ tzselect\n$ echo &quot;TZ=&apos;Asia/Shanghai&apos;; export TZ&quot; &gt;&gt; ~/.profile\n$ . ~/.profile\n$ sudo apt-get update\n$ sudo apt-get upgrade\n</code></pre><h3 id=\"Install-Dropbox\"><a href=\"#Install-Dropbox\" class=\"headerlink\" title=\"Install Dropbox\"></a>Install Dropbox</h3><pre><code>$ cd ~ &amp;&amp; wget -O - &quot;https://www.dropbox.com/download?plat=lnx.x86_64&quot; | tar xzf -\n$ mkdir -p ~/bin &amp;&amp; wget -O ~/bin/dropbox.py &quot;https://www.dropbox.com/download?dl=packages/dropbox.py&quot;\n</code></pre><h3 id=\"Install-nginx\"><a href=\"#Install-nginx\" class=\"headerlink\" title=\"Install nginx\"></a>Install nginx</h3><h4 id=\"From-Repositories\"><a href=\"#From-Repositories\" class=\"headerlink\" title=\"From Repositories\"></a>From Repositories</h4><pre><code>$ sudo apt-get update\n$ sudo apt-get upgrade\n$ sudo apt-get install nginx\n</code></pre><h4 id=\"From-Source-Distribution\"><a href=\"#From-Source-Distribution\" class=\"headerlink\" title=\"From Source Distribution\"></a>From Source Distribution</h4><pre><code>$ sudo apt-get update\n$ sudo apt-get upgrade\n$ sudo apt-get install libpcre3-dev build-essential libssl-dev\n$ cd /opt/\n$ sudo wget http://nginx.org/download/nginx-1.5.9.tar.gz\n$ sudo tar -zxvf nginx-1.5.9.tar.gz\n$ cd /opt/nginx-1.5.9/\n$ sudo ./configure --prefix=/opt/nginx --user=nginx --group=nginx --with-http_ssl_module --with-ipv6\n</code></pre><h5 id=\"You-should-see\"><a href=\"#You-should-see\" class=\"headerlink\" title=\"You should see:\"></a>You should see:</h5><pre><code>nginx path prefix: &quot;/opt/nginx&quot;\nnginx binary file: &quot;/opt/nginx/sbin/nginx&quot;\nnginx configuration prefix: &quot;/opt/nginx/conf&quot;\nnginx configuration file: &quot;/opt/nginx/conf/nginx.conf&quot;\nnginx pid file: &quot;/opt/nginx/logs/nginx.pid&quot;\nnginx error log file: &quot;/opt/nginx/logs/error.log&quot;\nnginx http access log file: &quot;/opt/nginx/logs/access.log&quot;\nnginx http client request body temporary files: &quot;client_body_temp&quot;\nnginx http proxy temporary files: &quot;proxy_temp&quot;\nnginx http fastcgi temporary files: &quot;fastcgi_temp&quot;\nnginx http uwsgi temporary files: &quot;uwsgi_temp&quot;\nnginx http scgi temporary files: &quot;scgi_temp&quot;\n</code></pre><h5 id=\"Then\"><a href=\"#Then\" class=\"headerlink\" title=\"Then\"></a>Then</h5><pre><code>$ sudo make\n$ sudo make install\n$ sudo adduser --system --no-create-home --disabled-login --disabled-password --group nginx\n</code></pre><h4 id=\"Create-an-Init-Script-to-Manage-Nginx\"><a href=\"#Create-an-Init-Script-to-Manage-Nginx\" class=\"headerlink\" title=\"Create an Init Script to Manage Nginx\"></a>Create an Init Script to Manage Nginx</h4><pre><code>$ sudo wget -O init-deb.sh http://library.linode.com/assets/1538-init-deb.sh\n$ sudo mv init-deb.sh /etc/init.d/nginx\n$ sudo chmod +x /etc/init.d/nginx\n$ sudo /usr/sbin/update-rc.d -f nginx defaults\n</code></pre><h4 id=\"Edit-etc-init-d-nginx\"><a href=\"#Edit-etc-init-d-nginx\" class=\"headerlink\" title=\"Edit /etc/init.d/nginx\"></a>Edit /etc/init.d/nginx</h4><pre><code>DAEMON=/usr/sbin/nginx\n</code></pre><h4 id=\"Edit-etc-nginx-nginx-conf\"><a href=\"#Edit-etc-nginx-nginx-conf\" class=\"headerlink\" title=\"Edit /etc/nginx/nginx.conf\"></a>Edit /etc/nginx/nginx.conf</h4><pre><code>user cauchy;\n</code></pre><h4 id=\"Start-nginx\"><a href=\"#Start-nginx\" class=\"headerlink\" title=\"Start nginx\"></a>Start nginx</h4><pre><code>$ sudo service nginx start\n</code></pre><h4 id=\"Add-www-folder\"><a href=\"#Add-www-folder\" class=\"headerlink\" title=\"Add www folder\"></a>Add www folder</h4><pre><code>$ sudo mkdir /var/www\n$ sudo chown cauchy:cauchy /var/www\n</code></pre><h4 id=\"Add-Virtual-Host-edit-etc-nginx-conf-d-vhosts-conf\"><a href=\"#Add-Virtual-Host-edit-etc-nginx-conf-d-vhosts-conf\" class=\"headerlink\" title=\"Add Virtual Host, edit /etc/nginx/conf.d/vhosts.conf\"></a>Add Virtual Host, edit /etc/nginx/conf.d/vhosts.conf</h4><pre><code>server {\n    listen 80;\n    server_name cauchy.com;\n    index index.html;\n    root /var/www/cauchycai.github.io;\n}\n</code></pre><h3 id=\"Install-jekyll\"><a href=\"#Install-jekyll\" class=\"headerlink\" title=\"Install jekyll\"></a>Install jekyll</h3><h4 id=\"install-gem\"><a href=\"#install-gem\" class=\"headerlink\" title=\"install gem\"></a>install gem</h4><h4 id=\"install-jekyll\"><a href=\"#install-jekyll\" class=\"headerlink\" title=\"install jekyll\"></a>install jekyll</h4><pre><code>$ sudo gem install jekyll\n</code></pre><h3 id=\"github-config\"><a href=\"#github-config\" class=\"headerlink\" title=\"github config\"></a>github config</h3><h4 id=\"Install-git-client\"><a href=\"#Install-git-client\" class=\"headerlink\" title=\"Install git client\"></a>Install git client</h4><pre><code>$ sudo apt-get install git\n$ git config --global user.email &quot;yourname@example.com&quot;\n$ git config --global user.name &quot;Your Name&quot;\n</code></pre><h4 id=\"Make-sure-ssh-id-rsa-pub-does-not-exist\"><a href=\"#Make-sure-ssh-id-rsa-pub-does-not-exist\" class=\"headerlink\" title=\"Make sure .ssh/id_rsa.pub does not exist\"></a>Make sure .ssh/id_rsa.pub does not exist</h4><pre><code>$ cd ~/.ssh\n$ ls -al\n</code></pre><h4 id=\"Generate-a-new-SSH-key\"><a href=\"#Generate-a-new-SSH-key\" class=\"headerlink\" title=\"Generate a new SSH key\"></a>Generate a new SSH key</h4><pre><code>$ ssh-keygen -t rsa -C &quot;yourname@example.com&quot;\n</code></pre><h4 id=\"Copy-ssh-id-rsa-pub-to-github-and-test\"><a href=\"#Copy-ssh-id-rsa-pub-to-github-and-test\" class=\"headerlink\" title=\"Copy .ssh/id_rsa.pub to github and test\"></a>Copy .ssh/id_rsa.pub to github and test</h4><pre><code>$ ssh -T git@github.com\n</code></pre>"},{"title":"Install Ruby on Rails on Debian 7.5","date":"2014-06-14T16:00:00.000Z","_content":"\n\n### Installing Passenger and Dependencies\n\n\t$ sudo apt-get update\n\t$ sudo apt-get upgrade\n\t$ sudo apt-get install build-essential libapache2-mod-passenger apache2 ruby rdoc ruby-denv libopenssl-ruby rubygems\n\n### Using the gem package manager for Ruby modules, install the fastthread gem:\n\n\t$ sudo gem install fastthread\n\t$ sudo gem install rails\n\n### Or install previous versions of rails\n\n\t$ gem install rails --version 2.1.2\n\t$ gem install rails --version 2.2.2\n\t$ gem install rails --version 2.3.5\n\t$ gem install rails --version 3.0.4\n\n### Install RVM\n\n\t$ curl -L https://get.rvm.io | bash -s stable --ruby\n\t$ echo \"source $HOME/.rvm/scripts/rvm\" >> ~/.profile\n\n","source":"_posts/2014-06-15-ruby-on-rails-on-debian75.md","raw":"---\ntitle: \"Install Ruby on Rails on Debian 7.5\"\ndate: 2014-06-15 00:00:00\ntags: [om, linux, ruby]\n---\n\n\n### Installing Passenger and Dependencies\n\n\t$ sudo apt-get update\n\t$ sudo apt-get upgrade\n\t$ sudo apt-get install build-essential libapache2-mod-passenger apache2 ruby rdoc ruby-denv libopenssl-ruby rubygems\n\n### Using the gem package manager for Ruby modules, install the fastthread gem:\n\n\t$ sudo gem install fastthread\n\t$ sudo gem install rails\n\n### Or install previous versions of rails\n\n\t$ gem install rails --version 2.1.2\n\t$ gem install rails --version 2.2.2\n\t$ gem install rails --version 2.3.5\n\t$ gem install rails --version 3.0.4\n\n### Install RVM\n\n\t$ curl -L https://get.rvm.io | bash -s stable --ruby\n\t$ echo \"source $HOME/.rvm/scripts/rvm\" >> ~/.profile\n\n","slug":"ruby-on-rails-on-debian75","published":1,"updated":"2016-08-07T03:23:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirk26l5z0001jglm1htioc7a","content":"<h3 id=\"Installing-Passenger-and-Dependencies\"><a href=\"#Installing-Passenger-and-Dependencies\" class=\"headerlink\" title=\"Installing Passenger and Dependencies\"></a>Installing Passenger and Dependencies</h3><pre><code>$ sudo apt-get update\n$ sudo apt-get upgrade\n$ sudo apt-get install build-essential libapache2-mod-passenger apache2 ruby rdoc ruby-denv libopenssl-ruby rubygems\n</code></pre><h3 id=\"Using-the-gem-package-manager-for-Ruby-modules-install-the-fastthread-gem\"><a href=\"#Using-the-gem-package-manager-for-Ruby-modules-install-the-fastthread-gem\" class=\"headerlink\" title=\"Using the gem package manager for Ruby modules, install the fastthread gem:\"></a>Using the gem package manager for Ruby modules, install the fastthread gem:</h3><pre><code>$ sudo gem install fastthread\n$ sudo gem install rails\n</code></pre><h3 id=\"Or-install-previous-versions-of-rails\"><a href=\"#Or-install-previous-versions-of-rails\" class=\"headerlink\" title=\"Or install previous versions of rails\"></a>Or install previous versions of rails</h3><pre><code>$ gem install rails --version 2.1.2\n$ gem install rails --version 2.2.2\n$ gem install rails --version 2.3.5\n$ gem install rails --version 3.0.4\n</code></pre><h3 id=\"Install-RVM\"><a href=\"#Install-RVM\" class=\"headerlink\" title=\"Install RVM\"></a>Install RVM</h3><pre><code>$ curl -L https://get.rvm.io | bash -s stable --ruby\n$ echo &quot;source $HOME/.rvm/scripts/rvm&quot; &gt;&gt; ~/.profile\n</code></pre>","excerpt":"","more":"<h3 id=\"Installing-Passenger-and-Dependencies\"><a href=\"#Installing-Passenger-and-Dependencies\" class=\"headerlink\" title=\"Installing Passenger and Dependencies\"></a>Installing Passenger and Dependencies</h3><pre><code>$ sudo apt-get update\n$ sudo apt-get upgrade\n$ sudo apt-get install build-essential libapache2-mod-passenger apache2 ruby rdoc ruby-denv libopenssl-ruby rubygems\n</code></pre><h3 id=\"Using-the-gem-package-manager-for-Ruby-modules-install-the-fastthread-gem\"><a href=\"#Using-the-gem-package-manager-for-Ruby-modules-install-the-fastthread-gem\" class=\"headerlink\" title=\"Using the gem package manager for Ruby modules, install the fastthread gem:\"></a>Using the gem package manager for Ruby modules, install the fastthread gem:</h3><pre><code>$ sudo gem install fastthread\n$ sudo gem install rails\n</code></pre><h3 id=\"Or-install-previous-versions-of-rails\"><a href=\"#Or-install-previous-versions-of-rails\" class=\"headerlink\" title=\"Or install previous versions of rails\"></a>Or install previous versions of rails</h3><pre><code>$ gem install rails --version 2.1.2\n$ gem install rails --version 2.2.2\n$ gem install rails --version 2.3.5\n$ gem install rails --version 3.0.4\n</code></pre><h3 id=\"Install-RVM\"><a href=\"#Install-RVM\" class=\"headerlink\" title=\"Install RVM\"></a>Install RVM</h3><pre><code>$ curl -L https://get.rvm.io | bash -s stable --ruby\n$ echo &quot;source $HOME/.rvm/scripts/rvm&quot; &gt;&gt; ~/.profile\n</code></pre>"},{"title":"Journal - 2014/10/02","date":"2014-10-01T16:00:00.000Z","_content":"\n## 2014/10/02 14:00 ##\n\n日记此后记于此。中断许久。9月30日去海关取了iPad（已买了半月多，才运到）。回家装应用，想起这个一直的需求 － 记日记的方法。各种应用都不满意，iPad上可以电容笔手写note，但体验不佳。笔记本上打字则不够随意，还是写在这个本子上。\n\n这个本子是笔记用，各种内容混在其中。现在打算将日记也混在其中。\n\n有点像Unix系统的stdout（标准输出），所有终端程序惯例上在没有指定输出文件时，默认都使用stdout这个“文件”。通常这个文件又自动在对应屏幕输出。\n","source":"_posts/2014-10-02-journal-20141002.md","raw":"---\ntitle: \"Journal - 2014/10/02\"\ndate: 2014-10-02 00:00:00\ntags: [iPad, review]\n---\n\n## 2014/10/02 14:00 ##\n\n日记此后记于此。中断许久。9月30日去海关取了iPad（已买了半月多，才运到）。回家装应用，想起这个一直的需求 － 记日记的方法。各种应用都不满意，iPad上可以电容笔手写note，但体验不佳。笔记本上打字则不够随意，还是写在这个本子上。\n\n这个本子是笔记用，各种内容混在其中。现在打算将日记也混在其中。\n\n有点像Unix系统的stdout（标准输出），所有终端程序惯例上在没有指定输出文件时，默认都使用stdout这个“文件”。通常这个文件又自动在对应屏幕输出。\n","slug":"journal-20141002","published":1,"updated":"2016-08-07T03:24:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirk26l630003jglmsiegnr9w","content":"<h2 id=\"2014-10-02-14-00\"><a href=\"#2014-10-02-14-00\" class=\"headerlink\" title=\"2014/10/02 14:00\"></a>2014/10/02 14:00</h2><p>日记此后记于此。中断许久。9月30日去海关取了iPad（已买了半月多，才运到）。回家装应用，想起这个一直的需求 － 记日记的方法。各种应用都不满意，iPad上可以电容笔手写note，但体验不佳。笔记本上打字则不够随意，还是写在这个本子上。</p>\n<p>这个本子是笔记用，各种内容混在其中。现在打算将日记也混在其中。</p>\n<p>有点像Unix系统的stdout（标准输出），所有终端程序惯例上在没有指定输出文件时，默认都使用stdout这个“文件”。通常这个文件又自动在对应屏幕输出。</p>\n","excerpt":"","more":"<h2 id=\"2014-10-02-14-00\"><a href=\"#2014-10-02-14-00\" class=\"headerlink\" title=\"2014/10/02 14:00\"></a>2014/10/02 14:00</h2><p>日记此后记于此。中断许久。9月30日去海关取了iPad（已买了半月多，才运到）。回家装应用，想起这个一直的需求 － 记日记的方法。各种应用都不满意，iPad上可以电容笔手写note，但体验不佳。笔记本上打字则不够随意，还是写在这个本子上。</p>\n<p>这个本子是笔记用，各种内容混在其中。现在打算将日记也混在其中。</p>\n<p>有点像Unix系统的stdout（标准输出），所有终端程序惯例上在没有指定输出文件时，默认都使用stdout这个“文件”。通常这个文件又自动在对应屏幕输出。</p>\n"},{"title":"在svn库中使用git","date":"2014-07-22T16:00:00.000Z","_content":"\n\n初始化Git版本库；忽略svn版本库文件夹 => .svn；添加项目文件到git库。\n\n{% codeblock lang:bash %}\n$ cd svn_repo\n$ git init\n$ echo \".svn\" > .gitignore\n$ git add --all\n$ git commit -m \"first commit\"\n{% endcodeblock %}\n\n设置svn忽略git版本库相关的文件。\n\n{% codeblock lang:bash %}\n$ svn propset svn:ignore \".git*\" .\n$ svn commit -m \"忽略git版本库文件\"\n{% endcodeblock %}\n\n之后就可以在svn库里使用git的branch功能了。\n\n这样就可以一定程度上解决一个功能写了好久只写到一半却不敢提交的问题。具体可以这样使用：\n\n1> 当我们做一个大功能时，新开一个branch; 切到这个branch进行开发：\n\n{% codeblock lang:bash %}\n$ git branch newui\n$ git checkout newui\n{% endcodeblock %}\n\n2> 写到一半来了个紧急需求，得赶紧上。。好吧。。先切回来把这个任务做掉：\n\n{% codeblock lang:bash %}\n$ git checkout master\n{% endcodeblock %}\n\n3> 代码回到了之前的状态，先把小功能改完然后提交：\n\n{% codeblock lang:bash %}\n$ git commit -m \"某个紧急问题\"\n$ svn commit -m \"....\"\n{% endcodeblock %}\n\n4> ok,去测吧。继续做newui\n\n{% codeblock lang:bash %}\n$ git checkout newui\n{% endcodeblock %}\n\n5> n久之后终于把newui做完可以提交svn了\n\n{% codeblock lang:bash %}\n$ git checkout master\n$ git merge newui\n$ svn commit -m \"new ui\"\n{% endcodeblock %}\n\n","source":"_posts/2014-07-23-git-in-svn-repo.md","raw":"---\ntitle: \"在svn库中使用git\"\ndate: 2014-07-23 00:00:00\ntags: [git]\n---\n\n\n初始化Git版本库；忽略svn版本库文件夹 => .svn；添加项目文件到git库。\n\n{% codeblock lang:bash %}\n$ cd svn_repo\n$ git init\n$ echo \".svn\" > .gitignore\n$ git add --all\n$ git commit -m \"first commit\"\n{% endcodeblock %}\n\n设置svn忽略git版本库相关的文件。\n\n{% codeblock lang:bash %}\n$ svn propset svn:ignore \".git*\" .\n$ svn commit -m \"忽略git版本库文件\"\n{% endcodeblock %}\n\n之后就可以在svn库里使用git的branch功能了。\n\n这样就可以一定程度上解决一个功能写了好久只写到一半却不敢提交的问题。具体可以这样使用：\n\n1> 当我们做一个大功能时，新开一个branch; 切到这个branch进行开发：\n\n{% codeblock lang:bash %}\n$ git branch newui\n$ git checkout newui\n{% endcodeblock %}\n\n2> 写到一半来了个紧急需求，得赶紧上。。好吧。。先切回来把这个任务做掉：\n\n{% codeblock lang:bash %}\n$ git checkout master\n{% endcodeblock %}\n\n3> 代码回到了之前的状态，先把小功能改完然后提交：\n\n{% codeblock lang:bash %}\n$ git commit -m \"某个紧急问题\"\n$ svn commit -m \"....\"\n{% endcodeblock %}\n\n4> ok,去测吧。继续做newui\n\n{% codeblock lang:bash %}\n$ git checkout newui\n{% endcodeblock %}\n\n5> n久之后终于把newui做完可以提交svn了\n\n{% codeblock lang:bash %}\n$ git checkout master\n$ git merge newui\n$ svn commit -m \"new ui\"\n{% endcodeblock %}\n\n","slug":"git-in-svn-repo","published":1,"updated":"2016-08-07T03:36:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirk26l650004jglmc0t3xosp","content":"<p>初始化Git版本库；忽略svn版本库文件夹 =&gt; .svn；添加项目文件到git库。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ <span class=\"built_in\">cd</span> svn_repo</div><div class=\"line\">$ git init</div><div class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">\".svn\"</span> &gt; .gitignore</div><div class=\"line\">$ git add --all</div><div class=\"line\">$ git commit -m <span class=\"string\">\"first commit\"</span></div></pre></td></tr></table></figure>\n<p>设置svn忽略git版本库相关的文件。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ svn propset svn:ignore <span class=\"string\">\".git*\"</span> .</div><div class=\"line\">$ svn commit -m <span class=\"string\">\"忽略git版本库文件\"</span></div></pre></td></tr></table></figure>\n<p>之后就可以在svn库里使用git的branch功能了。</p>\n<p>这样就可以一定程度上解决一个功能写了好久只写到一半却不敢提交的问题。具体可以这样使用：</p>\n<p>1&gt; 当我们做一个大功能时，新开一个branch; 切到这个branch进行开发：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git branch newui</div><div class=\"line\">$ git checkout newui</div></pre></td></tr></table></figure>\n<p>2&gt; 写到一半来了个紧急需求，得赶紧上。。好吧。。先切回来把这个任务做掉：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git checkout master</div></pre></td></tr></table></figure>\n<p>3&gt; 代码回到了之前的状态，先把小功能改完然后提交：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git commit -m <span class=\"string\">\"某个紧急问题\"</span></div><div class=\"line\">$ svn commit -m <span class=\"string\">\"....\"</span></div></pre></td></tr></table></figure>\n<p>4&gt; ok,去测吧。继续做newui</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git checkout newui</div></pre></td></tr></table></figure>\n<p>5&gt; n久之后终于把newui做完可以提交svn了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git checkout master</div><div class=\"line\">$ git merge newui</div><div class=\"line\">$ svn commit -m <span class=\"string\">\"new ui\"</span></div></pre></td></tr></table></figure>\n","excerpt":"","more":"<p>初始化Git版本库；忽略svn版本库文件夹 =&gt; .svn；添加项目文件到git库。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ <span class=\"built_in\">cd</span> svn_repo</div><div class=\"line\">$ git init</div><div class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">\".svn\"</span> &gt; .gitignore</div><div class=\"line\">$ git add --all</div><div class=\"line\">$ git commit -m <span class=\"string\">\"first commit\"</span></div></pre></td></tr></table></figure>\n<p>设置svn忽略git版本库相关的文件。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ svn propset svn:ignore <span class=\"string\">\".git*\"</span> .</div><div class=\"line\">$ svn commit -m <span class=\"string\">\"忽略git版本库文件\"</span></div></pre></td></tr></table></figure>\n<p>之后就可以在svn库里使用git的branch功能了。</p>\n<p>这样就可以一定程度上解决一个功能写了好久只写到一半却不敢提交的问题。具体可以这样使用：</p>\n<p>1&gt; 当我们做一个大功能时，新开一个branch; 切到这个branch进行开发：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git branch newui</div><div class=\"line\">$ git checkout newui</div></pre></td></tr></table></figure>\n<p>2&gt; 写到一半来了个紧急需求，得赶紧上。。好吧。。先切回来把这个任务做掉：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git checkout master</div></pre></td></tr></table></figure>\n<p>3&gt; 代码回到了之前的状态，先把小功能改完然后提交：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git commit -m <span class=\"string\">\"某个紧急问题\"</span></div><div class=\"line\">$ svn commit -m <span class=\"string\">\"....\"</span></div></pre></td></tr></table></figure>\n<p>4&gt; ok,去测吧。继续做newui</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git checkout newui</div></pre></td></tr></table></figure>\n<p>5&gt; n久之后终于把newui做完可以提交svn了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git checkout master</div><div class=\"line\">$ git merge newui</div><div class=\"line\">$ svn commit -m <span class=\"string\">\"new ui\"</span></div></pre></td></tr></table></figure>\n"},{"title":"关于专注力","date":"2014-10-04T16:00:00.000Z","_content":"\n\n摘录茨威格自传“昨日的世界”里的一段文字。\n\n==========\n\n对于新人来说，遇见里尔克这样非凡的人物，真是受益匪浅，但是我还想获得受益终生的经历。而这种教益在我与罗丹的相遇中得到了。在维尔哈伦的帮助下，我参观了罗丹的工作室。在罗丹的创作室，要说的话都卡在我的喉咙里，我激动得说不出一句溢美之词。我的窘态让罗丹觉得很有趣，分别时，罗丹邀请我参观他在莫东的工作室，并请我一起就餐。于是我得到的第一个教益是----伟大的人物都是心地善良的人。\n\n我得到的第二个教益是----伟大的人物在生活中是非常简朴的。罗丹家的饭菜是如此的简单，就像一个中等水平农民家的伙食：一块厚厚实实的肉、几颗橄榄、充足的水果，外加本地产的原汁葡萄酒。我慢慢地不再惧怕，说话也自然流畅了。\n\n吃完饭以后，我们走进他的创作室。那是一间大厅，里面保留了他的最重要的作品的复制品。最后，罗丹大师把我领到一座雕塑的基座旁，上面放着他的最新的作品，一尊头上蒙着湿布的女人肖像。他用自己一双农民似的满是皱纹的厚实的手揭下湿布，接着退后几步。“妙极了”，我情不自禁地冒出这么一个词，同时为自己语言的索然无味而感到羞愧。可是他却一边大量着自己的作品，一边以冷静的毫不骄傲的客观态度附和了一句：“是吗？” 接着又犹豫了一番。 “只是肩膀还有点----等一下！” 他说着脱去上衣，穿上白色工作服，拿起一把刮铲，在塑像肩上非常熟练的一刮，把那女人的柔软皮肤弄平滑了，那雕像的肌肤就如同活人的一样鲜活生动。接着他又后退几步。 “喏，还有这地方。”他喃喃低语道。又在细节上作了很小的改动，效果立显。过后，他就再也没有说什么，只是一会儿向前，一会儿退后，从一面镜子里端详着那尊雕塑，一边嘀嘀咕咕，发出一些别人听不懂的声音，一边修改着。他的眼神，在吃饭的时候显得和善温柔，这会儿却闪烁着奇异的光芒，他仿佛变得更高大、更年轻了。他用全部热情和健壮身躯的全部力量工作着、工作着。在这段精神非常集中的时间内把我全然忘却。\n\n他的动作有力，好像生气似的。罗丹完全沉浸在一种狂喜或者沉醉中，他干得越来越快。随后，双手渐渐变得犹豫不决起来。看来，已经没有什么可干了。他朝后退了一次、两次、三次，再也没有修改什么。接着他低语了几句，便非常温柔地把布蒙在塑像四周，好像把一块围巾搭在一个心爱的女人肩膀上似的。他深深地松了一口气。他的形象重又显得庄重起来。\n\n他向房门走去。当他快要关上房门的时候发现了我，他恼怒地望着我，大概心想：溜进了他的创作室的年轻人是谁? 但是他随即又记起来了，并且有点不好意思地向我走来。 “对不起，先生”，他开始说道。 可是，我没让他说完，我只是感激地握住他的一只手。我甚至想亲吻这只手。因为我在那一个小时内看到了一切伟大艺术的永恒的秘密，即看到了世间任何一种艺术创作的诀窍：全神贯注，而且要集中全部的精力；每一个艺术家都得把自己的一切置之度外，忘却周围整个世界。这让我受益终身。\n\n================\n\n想想会觉得有点惭愧，我只有在睡午觉半睡半醒的时候有过这种忘我的状态，想不起自己身在何处，好像是在睡觉，但是想不起是不是在家里，想不起现在的时间，想不起现在是躺着还是趴着。我相信我半梦半醒时体验的这种状态也是一种“沉浸”。但是人家罗丹在清醒的情况下就轻松的切换到了那种状态。\n\n专注力绝对可以算作一种能力，每个人在这个能力上有不同的天赋。比如樱木花道，他的所谓天才绝对不仅仅是身体上的天赋，更重要的是专注力，每当专注的时候他的身体上的爆发力才真正发挥出来。持续的专注也让他很快的学会篮球的各项技术。动画片里其实也很着重说了他的这个特点。\n\n更重要的是，专注的状态好像能带来持久的快乐。这个结论来自我的感觉。假如从心理学角度去解释，快乐的感觉来自于不断建立大脑神经元间的联系的过程。当我们不快乐，往往是我们不得不去忘记过去的时候。把以前牢牢建立的神经元网络拆散。这是很痛苦的事。而专注力是一种“快乐”的能量，当我们专注于一件事，我们暂时忘记所有其他不相关，以最快的速度围绕这件事建立神经元网络。这是最高效的学习过程。\n","source":"_posts/2014-10-05-on-focus.md","raw":"---\ntitle: \"关于专注力\"\ndate: 2014-10-05 00:00:00\ntags: [essay]\n---\n\n\n摘录茨威格自传“昨日的世界”里的一段文字。\n\n==========\n\n对于新人来说，遇见里尔克这样非凡的人物，真是受益匪浅，但是我还想获得受益终生的经历。而这种教益在我与罗丹的相遇中得到了。在维尔哈伦的帮助下，我参观了罗丹的工作室。在罗丹的创作室，要说的话都卡在我的喉咙里，我激动得说不出一句溢美之词。我的窘态让罗丹觉得很有趣，分别时，罗丹邀请我参观他在莫东的工作室，并请我一起就餐。于是我得到的第一个教益是----伟大的人物都是心地善良的人。\n\n我得到的第二个教益是----伟大的人物在生活中是非常简朴的。罗丹家的饭菜是如此的简单，就像一个中等水平农民家的伙食：一块厚厚实实的肉、几颗橄榄、充足的水果，外加本地产的原汁葡萄酒。我慢慢地不再惧怕，说话也自然流畅了。\n\n吃完饭以后，我们走进他的创作室。那是一间大厅，里面保留了他的最重要的作品的复制品。最后，罗丹大师把我领到一座雕塑的基座旁，上面放着他的最新的作品，一尊头上蒙着湿布的女人肖像。他用自己一双农民似的满是皱纹的厚实的手揭下湿布，接着退后几步。“妙极了”，我情不自禁地冒出这么一个词，同时为自己语言的索然无味而感到羞愧。可是他却一边大量着自己的作品，一边以冷静的毫不骄傲的客观态度附和了一句：“是吗？” 接着又犹豫了一番。 “只是肩膀还有点----等一下！” 他说着脱去上衣，穿上白色工作服，拿起一把刮铲，在塑像肩上非常熟练的一刮，把那女人的柔软皮肤弄平滑了，那雕像的肌肤就如同活人的一样鲜活生动。接着他又后退几步。 “喏，还有这地方。”他喃喃低语道。又在细节上作了很小的改动，效果立显。过后，他就再也没有说什么，只是一会儿向前，一会儿退后，从一面镜子里端详着那尊雕塑，一边嘀嘀咕咕，发出一些别人听不懂的声音，一边修改着。他的眼神，在吃饭的时候显得和善温柔，这会儿却闪烁着奇异的光芒，他仿佛变得更高大、更年轻了。他用全部热情和健壮身躯的全部力量工作着、工作着。在这段精神非常集中的时间内把我全然忘却。\n\n他的动作有力，好像生气似的。罗丹完全沉浸在一种狂喜或者沉醉中，他干得越来越快。随后，双手渐渐变得犹豫不决起来。看来，已经没有什么可干了。他朝后退了一次、两次、三次，再也没有修改什么。接着他低语了几句，便非常温柔地把布蒙在塑像四周，好像把一块围巾搭在一个心爱的女人肩膀上似的。他深深地松了一口气。他的形象重又显得庄重起来。\n\n他向房门走去。当他快要关上房门的时候发现了我，他恼怒地望着我，大概心想：溜进了他的创作室的年轻人是谁? 但是他随即又记起来了，并且有点不好意思地向我走来。 “对不起，先生”，他开始说道。 可是，我没让他说完，我只是感激地握住他的一只手。我甚至想亲吻这只手。因为我在那一个小时内看到了一切伟大艺术的永恒的秘密，即看到了世间任何一种艺术创作的诀窍：全神贯注，而且要集中全部的精力；每一个艺术家都得把自己的一切置之度外，忘却周围整个世界。这让我受益终身。\n\n================\n\n想想会觉得有点惭愧，我只有在睡午觉半睡半醒的时候有过这种忘我的状态，想不起自己身在何处，好像是在睡觉，但是想不起是不是在家里，想不起现在的时间，想不起现在是躺着还是趴着。我相信我半梦半醒时体验的这种状态也是一种“沉浸”。但是人家罗丹在清醒的情况下就轻松的切换到了那种状态。\n\n专注力绝对可以算作一种能力，每个人在这个能力上有不同的天赋。比如樱木花道，他的所谓天才绝对不仅仅是身体上的天赋，更重要的是专注力，每当专注的时候他的身体上的爆发力才真正发挥出来。持续的专注也让他很快的学会篮球的各项技术。动画片里其实也很着重说了他的这个特点。\n\n更重要的是，专注的状态好像能带来持久的快乐。这个结论来自我的感觉。假如从心理学角度去解释，快乐的感觉来自于不断建立大脑神经元间的联系的过程。当我们不快乐，往往是我们不得不去忘记过去的时候。把以前牢牢建立的神经元网络拆散。这是很痛苦的事。而专注力是一种“快乐”的能量，当我们专注于一件事，我们暂时忘记所有其他不相关，以最快的速度围绕这件事建立神经元网络。这是最高效的学习过程。\n","slug":"on-focus","published":1,"updated":"2016-08-07T03:25:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirk26l680006jglm8awo6kog","content":"<p>摘录茨威格自传“昨日的世界”里的一段文字。</p>\n<p>==========</p>\n<p>对于新人来说，遇见里尔克这样非凡的人物，真是受益匪浅，但是我还想获得受益终生的经历。而这种教益在我与罗丹的相遇中得到了。在维尔哈伦的帮助下，我参观了罗丹的工作室。在罗丹的创作室，要说的话都卡在我的喉咙里，我激动得说不出一句溢美之词。我的窘态让罗丹觉得很有趣，分别时，罗丹邀请我参观他在莫东的工作室，并请我一起就餐。于是我得到的第一个教益是—-伟大的人物都是心地善良的人。</p>\n<p>我得到的第二个教益是—-伟大的人物在生活中是非常简朴的。罗丹家的饭菜是如此的简单，就像一个中等水平农民家的伙食：一块厚厚实实的肉、几颗橄榄、充足的水果，外加本地产的原汁葡萄酒。我慢慢地不再惧怕，说话也自然流畅了。</p>\n<p>吃完饭以后，我们走进他的创作室。那是一间大厅，里面保留了他的最重要的作品的复制品。最后，罗丹大师把我领到一座雕塑的基座旁，上面放着他的最新的作品，一尊头上蒙着湿布的女人肖像。他用自己一双农民似的满是皱纹的厚实的手揭下湿布，接着退后几步。“妙极了”，我情不自禁地冒出这么一个词，同时为自己语言的索然无味而感到羞愧。可是他却一边大量着自己的作品，一边以冷静的毫不骄傲的客观态度附和了一句：“是吗？” 接着又犹豫了一番。 “只是肩膀还有点—-等一下！” 他说着脱去上衣，穿上白色工作服，拿起一把刮铲，在塑像肩上非常熟练的一刮，把那女人的柔软皮肤弄平滑了，那雕像的肌肤就如同活人的一样鲜活生动。接着他又后退几步。 “喏，还有这地方。”他喃喃低语道。又在细节上作了很小的改动，效果立显。过后，他就再也没有说什么，只是一会儿向前，一会儿退后，从一面镜子里端详着那尊雕塑，一边嘀嘀咕咕，发出一些别人听不懂的声音，一边修改着。他的眼神，在吃饭的时候显得和善温柔，这会儿却闪烁着奇异的光芒，他仿佛变得更高大、更年轻了。他用全部热情和健壮身躯的全部力量工作着、工作着。在这段精神非常集中的时间内把我全然忘却。</p>\n<p>他的动作有力，好像生气似的。罗丹完全沉浸在一种狂喜或者沉醉中，他干得越来越快。随后，双手渐渐变得犹豫不决起来。看来，已经没有什么可干了。他朝后退了一次、两次、三次，再也没有修改什么。接着他低语了几句，便非常温柔地把布蒙在塑像四周，好像把一块围巾搭在一个心爱的女人肩膀上似的。他深深地松了一口气。他的形象重又显得庄重起来。</p>\n<p>他向房门走去。当他快要关上房门的时候发现了我，他恼怒地望着我，大概心想：溜进了他的创作室的年轻人是谁? 但是他随即又记起来了，并且有点不好意思地向我走来。 “对不起，先生”，他开始说道。 可是，我没让他说完，我只是感激地握住他的一只手。我甚至想亲吻这只手。因为我在那一个小时内看到了一切伟大艺术的永恒的秘密，即看到了世间任何一种艺术创作的诀窍：全神贯注，而且要集中全部的精力；每一个艺术家都得把自己的一切置之度外，忘却周围整个世界。这让我受益终身。</p>\n<p>================</p>\n<p>想想会觉得有点惭愧，我只有在睡午觉半睡半醒的时候有过这种忘我的状态，想不起自己身在何处，好像是在睡觉，但是想不起是不是在家里，想不起现在的时间，想不起现在是躺着还是趴着。我相信我半梦半醒时体验的这种状态也是一种“沉浸”。但是人家罗丹在清醒的情况下就轻松的切换到了那种状态。</p>\n<p>专注力绝对可以算作一种能力，每个人在这个能力上有不同的天赋。比如樱木花道，他的所谓天才绝对不仅仅是身体上的天赋，更重要的是专注力，每当专注的时候他的身体上的爆发力才真正发挥出来。持续的专注也让他很快的学会篮球的各项技术。动画片里其实也很着重说了他的这个特点。</p>\n<p>更重要的是，专注的状态好像能带来持久的快乐。这个结论来自我的感觉。假如从心理学角度去解释，快乐的感觉来自于不断建立大脑神经元间的联系的过程。当我们不快乐，往往是我们不得不去忘记过去的时候。把以前牢牢建立的神经元网络拆散。这是很痛苦的事。而专注力是一种“快乐”的能量，当我们专注于一件事，我们暂时忘记所有其他不相关，以最快的速度围绕这件事建立神经元网络。这是最高效的学习过程。</p>\n","excerpt":"","more":"<p>摘录茨威格自传“昨日的世界”里的一段文字。</p>\n<p>==========</p>\n<p>对于新人来说，遇见里尔克这样非凡的人物，真是受益匪浅，但是我还想获得受益终生的经历。而这种教益在我与罗丹的相遇中得到了。在维尔哈伦的帮助下，我参观了罗丹的工作室。在罗丹的创作室，要说的话都卡在我的喉咙里，我激动得说不出一句溢美之词。我的窘态让罗丹觉得很有趣，分别时，罗丹邀请我参观他在莫东的工作室，并请我一起就餐。于是我得到的第一个教益是—-伟大的人物都是心地善良的人。</p>\n<p>我得到的第二个教益是—-伟大的人物在生活中是非常简朴的。罗丹家的饭菜是如此的简单，就像一个中等水平农民家的伙食：一块厚厚实实的肉、几颗橄榄、充足的水果，外加本地产的原汁葡萄酒。我慢慢地不再惧怕，说话也自然流畅了。</p>\n<p>吃完饭以后，我们走进他的创作室。那是一间大厅，里面保留了他的最重要的作品的复制品。最后，罗丹大师把我领到一座雕塑的基座旁，上面放着他的最新的作品，一尊头上蒙着湿布的女人肖像。他用自己一双农民似的满是皱纹的厚实的手揭下湿布，接着退后几步。“妙极了”，我情不自禁地冒出这么一个词，同时为自己语言的索然无味而感到羞愧。可是他却一边大量着自己的作品，一边以冷静的毫不骄傲的客观态度附和了一句：“是吗？” 接着又犹豫了一番。 “只是肩膀还有点—-等一下！” 他说着脱去上衣，穿上白色工作服，拿起一把刮铲，在塑像肩上非常熟练的一刮，把那女人的柔软皮肤弄平滑了，那雕像的肌肤就如同活人的一样鲜活生动。接着他又后退几步。 “喏，还有这地方。”他喃喃低语道。又在细节上作了很小的改动，效果立显。过后，他就再也没有说什么，只是一会儿向前，一会儿退后，从一面镜子里端详着那尊雕塑，一边嘀嘀咕咕，发出一些别人听不懂的声音，一边修改着。他的眼神，在吃饭的时候显得和善温柔，这会儿却闪烁着奇异的光芒，他仿佛变得更高大、更年轻了。他用全部热情和健壮身躯的全部力量工作着、工作着。在这段精神非常集中的时间内把我全然忘却。</p>\n<p>他的动作有力，好像生气似的。罗丹完全沉浸在一种狂喜或者沉醉中，他干得越来越快。随后，双手渐渐变得犹豫不决起来。看来，已经没有什么可干了。他朝后退了一次、两次、三次，再也没有修改什么。接着他低语了几句，便非常温柔地把布蒙在塑像四周，好像把一块围巾搭在一个心爱的女人肩膀上似的。他深深地松了一口气。他的形象重又显得庄重起来。</p>\n<p>他向房门走去。当他快要关上房门的时候发现了我，他恼怒地望着我，大概心想：溜进了他的创作室的年轻人是谁? 但是他随即又记起来了，并且有点不好意思地向我走来。 “对不起，先生”，他开始说道。 可是，我没让他说完，我只是感激地握住他的一只手。我甚至想亲吻这只手。因为我在那一个小时内看到了一切伟大艺术的永恒的秘密，即看到了世间任何一种艺术创作的诀窍：全神贯注，而且要集中全部的精力；每一个艺术家都得把自己的一切置之度外，忘却周围整个世界。这让我受益终身。</p>\n<p>================</p>\n<p>想想会觉得有点惭愧，我只有在睡午觉半睡半醒的时候有过这种忘我的状态，想不起自己身在何处，好像是在睡觉，但是想不起是不是在家里，想不起现在的时间，想不起现在是躺着还是趴着。我相信我半梦半醒时体验的这种状态也是一种“沉浸”。但是人家罗丹在清醒的情况下就轻松的切换到了那种状态。</p>\n<p>专注力绝对可以算作一种能力，每个人在这个能力上有不同的天赋。比如樱木花道，他的所谓天才绝对不仅仅是身体上的天赋，更重要的是专注力，每当专注的时候他的身体上的爆发力才真正发挥出来。持续的专注也让他很快的学会篮球的各项技术。动画片里其实也很着重说了他的这个特点。</p>\n<p>更重要的是，专注的状态好像能带来持久的快乐。这个结论来自我的感觉。假如从心理学角度去解释，快乐的感觉来自于不断建立大脑神经元间的联系的过程。当我们不快乐，往往是我们不得不去忘记过去的时候。把以前牢牢建立的神经元网络拆散。这是很痛苦的事。而专注力是一种“快乐”的能量，当我们专注于一件事，我们暂时忘记所有其他不相关，以最快的速度围绕这件事建立神经元网络。这是最高效的学习过程。</p>\n"},{"title":"Moco","date":"2014-12-09T16:00:00.000Z","_content":"\n\n# 解决的问题 #\n\nMoco是一个用来模拟外部服务器的工具。在系统集成时，外部接口的稳定性无法在我们的掌控中，使用这个工具就可以弥补这个问题，即使外部接口不可用也不影响我们自己系统的开发和测试。\n\n# 安装 #\n\n下载：http://repo1.maven.org/maven2/com/github/dreamhead/moco-runner/0.10.0/moco-runner-0.10.0-standalone.jar\n\n运行：\n\n{% codeblock bash %}\n$ java -jar moco-runner-<version>-standalone.jar http -p 12306 -c foo.json\n{% endcodeblock %}\n\n\n这样就启动一个moco实例，在12306端口接受http请求。foo.json作为配置文件，决定这个模拟服务器如何响应请求。\n\n\n# json格式配置文件 #\n\n每一个moco实例对应一个这样的配置文件。\n\n配置举例：\n\n1. URI\n\n{% codeblock json %}\n{\n  \"request\" :\n\t{\n\t\"uri\" : \"/foo\",\n\t\"queries\" :\n\t\t{\n\t\t  \"param\" : \"blah\"\n\t\t}\n\t},\n  \"response\" :\n\t{\n\t  \"text\" : \"bar\"\n\t}\n}\n{% endcodeblock %}\n\n测试，通过浏览器访问：http://localhost:12306/foo?parm=blah\n\n\n2. URI with HTTP method; URI regular expression match\n\n{% codeblock json %}\n{\n  \"request\" :\n\t{\n\t  \"method\" : \"get\",\n\t  \"uri\" : {\n\t\t\"match\": \"/\\\\w*/foo\"\n\t  }\n\t},\n  \"response\" :\n\t{\n\t  \"text\" : \"bar\"\n\t}\n}\n{% endcodeblock %}\n\n3. json response\n\n{% codeblock json %}\n{\n\t\"request\" :\n\t{\n\t\t\"uri\" : \"/sns/oauth2/access_token?appid=APPID&secret=SECRET&code=CODE&grant_type=authorization_code\"\n\t},\n\t\"response\" :\n\t{\n\t\t\"json\" :\n\t\t{\n\t\t\t\"access_token\":\"aaaaaaaaaaaaaaaaaaaaaaaaa\",\n\t\t\t\"expires_in\":7200,\n\t\t\t\"refresh_token\":\"rrrrrrrrrrrrrrrrrrrrrrrrr\",\n\t\t\t\"openid\":\"o-MCxjgmz73EWpfb86ls38LHicdc\",\n\t\t\t\"scope\":\"SCOPE\"\n\t\t}\n\t}\n}\n{% endcodeblock %}\n\n\n4. Redirect\n\n{% codeblock json %}\n{\n\t\"request\" :\n\t{\n\t\t\"uri\" : \"/redirect\"\n\t},\n\t\"redirectTo\" : \"http://www.guanaitong.com\"\n}\n{% endcodeblock %}\n\n\n# 如何在测试/开发环境部署 #\n\n如果外部测试服务器域名为：api.thirdparty.com\n\n1. 在某端口（如12306）运行模拟服务器实例\n\n{% codeblock bash %}\n$ java -jar moco-runner-<version>-standalone.jar http -p 12306 -c foo.json\n{% endcodeblock %}\n\n\n2. 在web服务器（nginx）配置中设置反向代理\n\n{% codeblock nginx %}\nserver {\n\tlisten 80;\n\tserver_name api.thirdparty.com;\n\tlocation / {\n\t\tproxy_set_header   X-Real-IP $remote_addr;\n\t\tproxy_set_header   Host      $http_host;\n\t\tproxy_pass         http://127.0.0.1:12306;\n\t}\n}\n{% endcodeblock %}\n\n3. 修改测试开发环境对于api.thirdparty.com的域名解析，使其指向测试/开发服务器。\n\n4. 之后调用第三方接口就是使用模拟服务器了\n","source":"_posts/2014-12-10-moco-installation.md","raw":"---\ntitle: \"Moco\"\ndate: 2014-12-10 00:00:00\ntags: [moco]\n---\n\n\n# 解决的问题 #\n\nMoco是一个用来模拟外部服务器的工具。在系统集成时，外部接口的稳定性无法在我们的掌控中，使用这个工具就可以弥补这个问题，即使外部接口不可用也不影响我们自己系统的开发和测试。\n\n# 安装 #\n\n下载：http://repo1.maven.org/maven2/com/github/dreamhead/moco-runner/0.10.0/moco-runner-0.10.0-standalone.jar\n\n运行：\n\n{% codeblock bash %}\n$ java -jar moco-runner-<version>-standalone.jar http -p 12306 -c foo.json\n{% endcodeblock %}\n\n\n这样就启动一个moco实例，在12306端口接受http请求。foo.json作为配置文件，决定这个模拟服务器如何响应请求。\n\n\n# json格式配置文件 #\n\n每一个moco实例对应一个这样的配置文件。\n\n配置举例：\n\n1. URI\n\n{% codeblock json %}\n{\n  \"request\" :\n\t{\n\t\"uri\" : \"/foo\",\n\t\"queries\" :\n\t\t{\n\t\t  \"param\" : \"blah\"\n\t\t}\n\t},\n  \"response\" :\n\t{\n\t  \"text\" : \"bar\"\n\t}\n}\n{% endcodeblock %}\n\n测试，通过浏览器访问：http://localhost:12306/foo?parm=blah\n\n\n2. URI with HTTP method; URI regular expression match\n\n{% codeblock json %}\n{\n  \"request\" :\n\t{\n\t  \"method\" : \"get\",\n\t  \"uri\" : {\n\t\t\"match\": \"/\\\\w*/foo\"\n\t  }\n\t},\n  \"response\" :\n\t{\n\t  \"text\" : \"bar\"\n\t}\n}\n{% endcodeblock %}\n\n3. json response\n\n{% codeblock json %}\n{\n\t\"request\" :\n\t{\n\t\t\"uri\" : \"/sns/oauth2/access_token?appid=APPID&secret=SECRET&code=CODE&grant_type=authorization_code\"\n\t},\n\t\"response\" :\n\t{\n\t\t\"json\" :\n\t\t{\n\t\t\t\"access_token\":\"aaaaaaaaaaaaaaaaaaaaaaaaa\",\n\t\t\t\"expires_in\":7200,\n\t\t\t\"refresh_token\":\"rrrrrrrrrrrrrrrrrrrrrrrrr\",\n\t\t\t\"openid\":\"o-MCxjgmz73EWpfb86ls38LHicdc\",\n\t\t\t\"scope\":\"SCOPE\"\n\t\t}\n\t}\n}\n{% endcodeblock %}\n\n\n4. Redirect\n\n{% codeblock json %}\n{\n\t\"request\" :\n\t{\n\t\t\"uri\" : \"/redirect\"\n\t},\n\t\"redirectTo\" : \"http://www.guanaitong.com\"\n}\n{% endcodeblock %}\n\n\n# 如何在测试/开发环境部署 #\n\n如果外部测试服务器域名为：api.thirdparty.com\n\n1. 在某端口（如12306）运行模拟服务器实例\n\n{% codeblock bash %}\n$ java -jar moco-runner-<version>-standalone.jar http -p 12306 -c foo.json\n{% endcodeblock %}\n\n\n2. 在web服务器（nginx）配置中设置反向代理\n\n{% codeblock nginx %}\nserver {\n\tlisten 80;\n\tserver_name api.thirdparty.com;\n\tlocation / {\n\t\tproxy_set_header   X-Real-IP $remote_addr;\n\t\tproxy_set_header   Host      $http_host;\n\t\tproxy_pass         http://127.0.0.1:12306;\n\t}\n}\n{% endcodeblock %}\n\n3. 修改测试开发环境对于api.thirdparty.com的域名解析，使其指向测试/开发服务器。\n\n4. 之后调用第三方接口就是使用模拟服务器了\n","slug":"moco-installation","published":1,"updated":"2016-08-07T03:29:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirk26l6a0007jglm427ppbqh","content":"<h1 id=\"解决的问题\"><a href=\"#解决的问题\" class=\"headerlink\" title=\"解决的问题\"></a>解决的问题</h1><p>Moco是一个用来模拟外部服务器的工具。在系统集成时，外部接口的稳定性无法在我们的掌控中，使用这个工具就可以弥补这个问题，即使外部接口不可用也不影响我们自己系统的开发和测试。</p>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><p>下载：<a href=\"http://repo1.maven.org/maven2/com/github/dreamhead/moco-runner/0.10.0/moco-runner-0.10.0-standalone.jar\" target=\"_blank\" rel=\"external\">http://repo1.maven.org/maven2/com/github/dreamhead/moco-runner/0.10.0/moco-runner-0.10.0-standalone.jar</a></p>\n<p>运行：</p>\n<figure class=\"highlight plain\"><figcaption><span>bash</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ java -jar moco-runner-&lt;version&gt;-standalone.jar http -p 12306 -c foo.json</div></pre></td></tr></table></figure>\n<p>这样就启动一个moco实例，在12306端口接受http请求。foo.json作为配置文件，决定这个模拟服务器如何响应请求。</p>\n<h1 id=\"json格式配置文件\"><a href=\"#json格式配置文件\" class=\"headerlink\" title=\"json格式配置文件\"></a>json格式配置文件</h1><p>每一个moco实例对应一个这样的配置文件。</p>\n<p>配置举例：</p>\n<ol>\n<li>URI</li>\n</ol>\n<figure class=\"highlight plain\"><figcaption><span>json</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  &quot;request&quot; :</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t&quot;uri&quot; : &quot;/foo&quot;,</div><div class=\"line\">\t&quot;queries&quot; :</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t  &quot;param&quot; : &quot;blah&quot;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">  &quot;response&quot; :</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t  &quot;text&quot; : &quot;bar&quot;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>测试，通过浏览器访问：<a href=\"http://localhost:12306/foo?parm=blah\" target=\"_blank\" rel=\"external\">http://localhost:12306/foo?parm=blah</a></p>\n<ol>\n<li>URI with HTTP method; URI regular expression match</li>\n</ol>\n<figure class=\"highlight plain\"><figcaption><span>json</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  &quot;request&quot; :</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t  &quot;method&quot; : &quot;get&quot;,</div><div class=\"line\">\t  &quot;uri&quot; : &#123;</div><div class=\"line\">\t\t&quot;match&quot;: &quot;/\\\\w*/foo&quot;</div><div class=\"line\">\t  &#125;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">  &quot;response&quot; :</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t  &quot;text&quot; : &quot;bar&quot;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol>\n<li>json response</li>\n</ol>\n<figure class=\"highlight plain\"><figcaption><span>json</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">\t&quot;request&quot; :</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t&quot;uri&quot; : &quot;/sns/oauth2/access_token?appid=APPID&amp;secret=SECRET&amp;code=CODE&amp;grant_type=authorization_code&quot;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t&quot;response&quot; :</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t&quot;json&quot; :</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t&quot;access_token&quot;:&quot;aaaaaaaaaaaaaaaaaaaaaaaaa&quot;,</div><div class=\"line\">\t\t\t&quot;expires_in&quot;:7200,</div><div class=\"line\">\t\t\t&quot;refresh_token&quot;:&quot;rrrrrrrrrrrrrrrrrrrrrrrrr&quot;,</div><div class=\"line\">\t\t\t&quot;openid&quot;:&quot;o-MCxjgmz73EWpfb86ls38LHicdc&quot;,</div><div class=\"line\">\t\t\t&quot;scope&quot;:&quot;SCOPE&quot;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol>\n<li>Redirect</li>\n</ol>\n<figure class=\"highlight plain\"><figcaption><span>json</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">\t&quot;request&quot; :</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t&quot;uri&quot; : &quot;/redirect&quot;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t&quot;redirectTo&quot; : &quot;http://www.guanaitong.com&quot;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"如何在测试-开发环境部署\"><a href=\"#如何在测试-开发环境部署\" class=\"headerlink\" title=\"如何在测试/开发环境部署\"></a>如何在测试/开发环境部署</h1><p>如果外部测试服务器域名为：api.thirdparty.com</p>\n<ol>\n<li>在某端口（如12306）运行模拟服务器实例</li>\n</ol>\n<figure class=\"highlight plain\"><figcaption><span>bash</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ java -jar moco-runner-&lt;version&gt;-standalone.jar http -p 12306 -c foo.json</div></pre></td></tr></table></figure>\n<ol>\n<li>在web服务器（nginx）配置中设置反向代理</li>\n</ol>\n<figure class=\"highlight plain\"><figcaption><span>nginx</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">server &#123;</div><div class=\"line\">\tlisten 80;</div><div class=\"line\">\tserver_name api.thirdparty.com;</div><div class=\"line\">\tlocation / &#123;</div><div class=\"line\">\t\tproxy_set_header   X-Real-IP $remote_addr;</div><div class=\"line\">\t\tproxy_set_header   Host      $http_host;</div><div class=\"line\">\t\tproxy_pass         http://127.0.0.1:12306;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol>\n<li><p>修改测试开发环境对于api.thirdparty.com的域名解析，使其指向测试/开发服务器。</p>\n</li>\n<li><p>之后调用第三方接口就是使用模拟服务器了</p>\n</li>\n</ol>\n","excerpt":"","more":"<h1 id=\"解决的问题\"><a href=\"#解决的问题\" class=\"headerlink\" title=\"解决的问题\"></a>解决的问题</h1><p>Moco是一个用来模拟外部服务器的工具。在系统集成时，外部接口的稳定性无法在我们的掌控中，使用这个工具就可以弥补这个问题，即使外部接口不可用也不影响我们自己系统的开发和测试。</p>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><p>下载：<a href=\"http://repo1.maven.org/maven2/com/github/dreamhead/moco-runner/0.10.0/moco-runner-0.10.0-standalone.jar\">http://repo1.maven.org/maven2/com/github/dreamhead/moco-runner/0.10.0/moco-runner-0.10.0-standalone.jar</a></p>\n<p>运行：</p>\n<figure class=\"highlight plain\"><figcaption><span>bash</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ java -jar moco-runner-&lt;version&gt;-standalone.jar http -p 12306 -c foo.json</div></pre></td></tr></table></figure>\n<p>这样就启动一个moco实例，在12306端口接受http请求。foo.json作为配置文件，决定这个模拟服务器如何响应请求。</p>\n<h1 id=\"json格式配置文件\"><a href=\"#json格式配置文件\" class=\"headerlink\" title=\"json格式配置文件\"></a>json格式配置文件</h1><p>每一个moco实例对应一个这样的配置文件。</p>\n<p>配置举例：</p>\n<ol>\n<li>URI</li>\n</ol>\n<figure class=\"highlight plain\"><figcaption><span>json</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  &quot;request&quot; :</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t&quot;uri&quot; : &quot;/foo&quot;,</div><div class=\"line\">\t&quot;queries&quot; :</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t  &quot;param&quot; : &quot;blah&quot;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">  &quot;response&quot; :</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t  &quot;text&quot; : &quot;bar&quot;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>测试，通过浏览器访问：<a href=\"http://localhost:12306/foo?parm=blah\">http://localhost:12306/foo?parm=blah</a></p>\n<ol>\n<li>URI with HTTP method; URI regular expression match</li>\n</ol>\n<figure class=\"highlight plain\"><figcaption><span>json</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  &quot;request&quot; :</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t  &quot;method&quot; : &quot;get&quot;,</div><div class=\"line\">\t  &quot;uri&quot; : &#123;</div><div class=\"line\">\t\t&quot;match&quot;: &quot;/\\\\w*/foo&quot;</div><div class=\"line\">\t  &#125;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">  &quot;response&quot; :</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t  &quot;text&quot; : &quot;bar&quot;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol>\n<li>json response</li>\n</ol>\n<figure class=\"highlight plain\"><figcaption><span>json</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">\t&quot;request&quot; :</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t&quot;uri&quot; : &quot;/sns/oauth2/access_token?appid=APPID&amp;secret=SECRET&amp;code=CODE&amp;grant_type=authorization_code&quot;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t&quot;response&quot; :</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t&quot;json&quot; :</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t&quot;access_token&quot;:&quot;aaaaaaaaaaaaaaaaaaaaaaaaa&quot;,</div><div class=\"line\">\t\t\t&quot;expires_in&quot;:7200,</div><div class=\"line\">\t\t\t&quot;refresh_token&quot;:&quot;rrrrrrrrrrrrrrrrrrrrrrrrr&quot;,</div><div class=\"line\">\t\t\t&quot;openid&quot;:&quot;o-MCxjgmz73EWpfb86ls38LHicdc&quot;,</div><div class=\"line\">\t\t\t&quot;scope&quot;:&quot;SCOPE&quot;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol>\n<li>Redirect</li>\n</ol>\n<figure class=\"highlight plain\"><figcaption><span>json</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">\t&quot;request&quot; :</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t&quot;uri&quot; : &quot;/redirect&quot;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t&quot;redirectTo&quot; : &quot;http://www.guanaitong.com&quot;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"如何在测试-开发环境部署\"><a href=\"#如何在测试-开发环境部署\" class=\"headerlink\" title=\"如何在测试/开发环境部署\"></a>如何在测试/开发环境部署</h1><p>如果外部测试服务器域名为：api.thirdparty.com</p>\n<ol>\n<li>在某端口（如12306）运行模拟服务器实例</li>\n</ol>\n<figure class=\"highlight plain\"><figcaption><span>bash</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ java -jar moco-runner-&lt;version&gt;-standalone.jar http -p 12306 -c foo.json</div></pre></td></tr></table></figure>\n<ol>\n<li>在web服务器（nginx）配置中设置反向代理</li>\n</ol>\n<figure class=\"highlight plain\"><figcaption><span>nginx</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">server &#123;</div><div class=\"line\">\tlisten 80;</div><div class=\"line\">\tserver_name api.thirdparty.com;</div><div class=\"line\">\tlocation / &#123;</div><div class=\"line\">\t\tproxy_set_header   X-Real-IP $remote_addr;</div><div class=\"line\">\t\tproxy_set_header   Host      $http_host;</div><div class=\"line\">\t\tproxy_pass         http://127.0.0.1:12306;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol>\n<li><p>修改测试开发环境对于api.thirdparty.com的域名解析，使其指向测试/开发服务器。</p>\n</li>\n<li><p>之后调用第三方接口就是使用模拟服务器了</p>\n</li>\n</ol>\n"},{"title":"PHP Autoloading","date":"2014-12-09T16:00:00.000Z","_content":"\n\n# 解决的问题 #\n\nAutoloading机制是php5引入的特性。\n一个类的实现可能需要依赖很多其他类，这就需要要么在脚本开始的地方引用所有基础类，要么在每个类的地方手动写上很长的一段类的引用。\n使用autoloading可以利用php运行环境来自动引用需要的类文件。\n\n使用上主要是用到了__autoload函数或者 spl\\_autoload\\_register\n\n# spl_autoload_register #\n\n支持多个autoload方法/函数, 多个不同autoload方法可以用来支持自动require多个不同目录位置的类。\n\n## 类方法作为注册为autoload函数 ##\n\n{% codeblock php %}\nclass Autoloader\n{\n\tprivate $dir;\n\tpublic function __construct($dir = null)\n\t{\n\t\tif (is_null($dir)) {\n\t\t\t$dir = dirname(__FILE__).'/..';\n\t\t}\n\t\t$this->dir = $dir;\n\t}\n\tpublic static function register($dir = null)\n\t{\n\t\tini_set('unserialize_callback_func', 'spl_autoload_call');\n\t\tspl_autoload_register(array(new self($dir), 'autoload'));\n\t}\n\tpublic function autoload($class)\n\t{\n\t\tif (file_exists($file = $this->dir.'/'.str_replace('\\\\', '/', $class).'.php')) {\n\t\t\trequire $file;\n\t\t}\n\t}\n}\n{% endcodeblock %}\n\n## 具体使用 ##\n\n{% codeblock php %}\nrequire_once PATH_TO_AUTOLOAD_CLASS;\n$loader = new Autoloader();\n$loader->register(HELPER_PATH);\n$loader->register(MODEL_PATH);\n{% endcodeblock %}\n\n# psr-4 #\n\n\"PHP Framework Interop Group\" 这个组织定义的Autoloading实现规范。\n\nhttp://www.php-fig.org/psr/psr-4/\n\n## 合法的类名 ##\n\n\t\\<NamespaceName>(\\<SubNamespaceNames>)*\\<ClassName>\n\n1. 必须有一个顶级namespace, 这个namespace也被称为 \"vendor namespace\";\n2. 可以有一个或多个 sub-namespace;\n3. 结尾处必须有一个类的名字\n4. 下划线(_)没有特殊的意义(不同于psr-0)\n5. 名字中大小写组合无限制\n6. 字母大小写敏感\n\n## 根据类名来选择include哪个php文件 ##\n\n1. 顶级namespace对应到一个base目录\n2. sub-namespace逐级对应base目录下的子目录\n3. 结尾处类名对应到<ClassName>.php文件\n\n# 使用autoloading的坏处 #\n\n没法显示的看到require的顺序，给调试带来不便。\n","source":"_posts/2014-12-10-php-autoloading.md","raw":"---\ntitle: \"PHP Autoloading\"\ndate: 2014-12-10 00:00:00\ntags: [php]\n---\n\n\n# 解决的问题 #\n\nAutoloading机制是php5引入的特性。\n一个类的实现可能需要依赖很多其他类，这就需要要么在脚本开始的地方引用所有基础类，要么在每个类的地方手动写上很长的一段类的引用。\n使用autoloading可以利用php运行环境来自动引用需要的类文件。\n\n使用上主要是用到了__autoload函数或者 spl\\_autoload\\_register\n\n# spl_autoload_register #\n\n支持多个autoload方法/函数, 多个不同autoload方法可以用来支持自动require多个不同目录位置的类。\n\n## 类方法作为注册为autoload函数 ##\n\n{% codeblock php %}\nclass Autoloader\n{\n\tprivate $dir;\n\tpublic function __construct($dir = null)\n\t{\n\t\tif (is_null($dir)) {\n\t\t\t$dir = dirname(__FILE__).'/..';\n\t\t}\n\t\t$this->dir = $dir;\n\t}\n\tpublic static function register($dir = null)\n\t{\n\t\tini_set('unserialize_callback_func', 'spl_autoload_call');\n\t\tspl_autoload_register(array(new self($dir), 'autoload'));\n\t}\n\tpublic function autoload($class)\n\t{\n\t\tif (file_exists($file = $this->dir.'/'.str_replace('\\\\', '/', $class).'.php')) {\n\t\t\trequire $file;\n\t\t}\n\t}\n}\n{% endcodeblock %}\n\n## 具体使用 ##\n\n{% codeblock php %}\nrequire_once PATH_TO_AUTOLOAD_CLASS;\n$loader = new Autoloader();\n$loader->register(HELPER_PATH);\n$loader->register(MODEL_PATH);\n{% endcodeblock %}\n\n# psr-4 #\n\n\"PHP Framework Interop Group\" 这个组织定义的Autoloading实现规范。\n\nhttp://www.php-fig.org/psr/psr-4/\n\n## 合法的类名 ##\n\n\t\\<NamespaceName>(\\<SubNamespaceNames>)*\\<ClassName>\n\n1. 必须有一个顶级namespace, 这个namespace也被称为 \"vendor namespace\";\n2. 可以有一个或多个 sub-namespace;\n3. 结尾处必须有一个类的名字\n4. 下划线(_)没有特殊的意义(不同于psr-0)\n5. 名字中大小写组合无限制\n6. 字母大小写敏感\n\n## 根据类名来选择include哪个php文件 ##\n\n1. 顶级namespace对应到一个base目录\n2. sub-namespace逐级对应base目录下的子目录\n3. 结尾处类名对应到<ClassName>.php文件\n\n# 使用autoloading的坏处 #\n\n没法显示的看到require的顺序，给调试带来不便。\n","slug":"php-autoloading","published":1,"updated":"2016-08-07T03:30:13.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirk26l6b0008jglmvutx5cc8","content":"<h1 id=\"解决的问题\"><a href=\"#解决的问题\" class=\"headerlink\" title=\"解决的问题\"></a>解决的问题</h1><p>Autoloading机制是php5引入的特性。<br>一个类的实现可能需要依赖很多其他类，这就需要要么在脚本开始的地方引用所有基础类，要么在每个类的地方手动写上很长的一段类的引用。<br>使用autoloading可以利用php运行环境来自动引用需要的类文件。</p>\n<p>使用上主要是用到了__autoload函数或者 spl_autoload_register</p>\n<h1 id=\"spl-autoload-register\"><a href=\"#spl-autoload-register\" class=\"headerlink\" title=\"spl_autoload_register\"></a>spl_autoload_register</h1><p>支持多个autoload方法/函数, 多个不同autoload方法可以用来支持自动require多个不同目录位置的类。</p>\n<h2 id=\"类方法作为注册为autoload函数\"><a href=\"#类方法作为注册为autoload函数\" class=\"headerlink\" title=\"类方法作为注册为autoload函数\"></a>类方法作为注册为autoload函数</h2><figure class=\"highlight plain\"><figcaption><span>php</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Autoloader</div><div class=\"line\">&#123;</div><div class=\"line\">\tprivate $dir;</div><div class=\"line\">\tpublic function __construct($dir = null)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tif (is_null($dir)) &#123;</div><div class=\"line\">\t\t\t$dir = dirname(__FILE__).&apos;/..&apos;;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t$this-&gt;dir = $dir;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tpublic static function register($dir = null)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tini_set(&apos;unserialize_callback_func&apos;, &apos;spl_autoload_call&apos;);</div><div class=\"line\">\t\tspl_autoload_register(array(new self($dir), &apos;autoload&apos;));</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tpublic function autoload($class)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tif (file_exists($file = $this-&gt;dir.&apos;/&apos;.str_replace(&apos;\\\\&apos;, &apos;/&apos;, $class).&apos;.php&apos;)) &#123;</div><div class=\"line\">\t\t\trequire $file;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"具体使用\"><a href=\"#具体使用\" class=\"headerlink\" title=\"具体使用\"></a>具体使用</h2><figure class=\"highlight plain\"><figcaption><span>php</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">require_once PATH_TO_AUTOLOAD_CLASS;</div><div class=\"line\">$loader = new Autoloader();</div><div class=\"line\">$loader-&gt;register(HELPER_PATH);</div><div class=\"line\">$loader-&gt;register(MODEL_PATH);</div></pre></td></tr></table></figure>\n<h1 id=\"psr-4\"><a href=\"#psr-4\" class=\"headerlink\" title=\"psr-4\"></a>psr-4</h1><p>“PHP Framework Interop Group” 这个组织定义的Autoloading实现规范。</p>\n<p><a href=\"http://www.php-fig.org/psr/psr-4/\" target=\"_blank\" rel=\"external\">http://www.php-fig.org/psr/psr-4/</a></p>\n<h2 id=\"合法的类名\"><a href=\"#合法的类名\" class=\"headerlink\" title=\"合法的类名\"></a>合法的类名</h2><pre><code>\\&lt;NamespaceName&gt;(\\&lt;SubNamespaceNames&gt;)*\\&lt;ClassName&gt;\n</code></pre><ol>\n<li>必须有一个顶级namespace, 这个namespace也被称为 “vendor namespace”;</li>\n<li>可以有一个或多个 sub-namespace;</li>\n<li>结尾处必须有一个类的名字</li>\n<li>下划线(_)没有特殊的意义(不同于psr-0)</li>\n<li>名字中大小写组合无限制</li>\n<li>字母大小写敏感</li>\n</ol>\n<h2 id=\"根据类名来选择include哪个php文件\"><a href=\"#根据类名来选择include哪个php文件\" class=\"headerlink\" title=\"根据类名来选择include哪个php文件\"></a>根据类名来选择include哪个php文件</h2><ol>\n<li>顶级namespace对应到一个base目录</li>\n<li>sub-namespace逐级对应base目录下的子目录</li>\n<li>结尾处类名对应到<classname>.php文件</classname></li>\n</ol>\n<h1 id=\"使用autoloading的坏处\"><a href=\"#使用autoloading的坏处\" class=\"headerlink\" title=\"使用autoloading的坏处\"></a>使用autoloading的坏处</h1><p>没法显示的看到require的顺序，给调试带来不便。</p>\n","excerpt":"","more":"<h1 id=\"解决的问题\"><a href=\"#解决的问题\" class=\"headerlink\" title=\"解决的问题\"></a>解决的问题</h1><p>Autoloading机制是php5引入的特性。<br>一个类的实现可能需要依赖很多其他类，这就需要要么在脚本开始的地方引用所有基础类，要么在每个类的地方手动写上很长的一段类的引用。<br>使用autoloading可以利用php运行环境来自动引用需要的类文件。</p>\n<p>使用上主要是用到了__autoload函数或者 spl_autoload_register</p>\n<h1 id=\"spl-autoload-register\"><a href=\"#spl-autoload-register\" class=\"headerlink\" title=\"spl_autoload_register\"></a>spl_autoload_register</h1><p>支持多个autoload方法/函数, 多个不同autoload方法可以用来支持自动require多个不同目录位置的类。</p>\n<h2 id=\"类方法作为注册为autoload函数\"><a href=\"#类方法作为注册为autoload函数\" class=\"headerlink\" title=\"类方法作为注册为autoload函数\"></a>类方法作为注册为autoload函数</h2><figure class=\"highlight plain\"><figcaption><span>php</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Autoloader</div><div class=\"line\">&#123;</div><div class=\"line\">\tprivate $dir;</div><div class=\"line\">\tpublic function __construct($dir = null)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tif (is_null($dir)) &#123;</div><div class=\"line\">\t\t\t$dir = dirname(__FILE__).&apos;/..&apos;;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t$this-&gt;dir = $dir;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tpublic static function register($dir = null)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tini_set(&apos;unserialize_callback_func&apos;, &apos;spl_autoload_call&apos;);</div><div class=\"line\">\t\tspl_autoload_register(array(new self($dir), &apos;autoload&apos;));</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tpublic function autoload($class)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tif (file_exists($file = $this-&gt;dir.&apos;/&apos;.str_replace(&apos;\\\\&apos;, &apos;/&apos;, $class).&apos;.php&apos;)) &#123;</div><div class=\"line\">\t\t\trequire $file;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"具体使用\"><a href=\"#具体使用\" class=\"headerlink\" title=\"具体使用\"></a>具体使用</h2><figure class=\"highlight plain\"><figcaption><span>php</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">require_once PATH_TO_AUTOLOAD_CLASS;</div><div class=\"line\">$loader = new Autoloader();</div><div class=\"line\">$loader-&gt;register(HELPER_PATH);</div><div class=\"line\">$loader-&gt;register(MODEL_PATH);</div></pre></td></tr></table></figure>\n<h1 id=\"psr-4\"><a href=\"#psr-4\" class=\"headerlink\" title=\"psr-4\"></a>psr-4</h1><p>“PHP Framework Interop Group” 这个组织定义的Autoloading实现规范。</p>\n<p><a href=\"http://www.php-fig.org/psr/psr-4/\">http://www.php-fig.org/psr/psr-4/</a></p>\n<h2 id=\"合法的类名\"><a href=\"#合法的类名\" class=\"headerlink\" title=\"合法的类名\"></a>合法的类名</h2><pre><code>\\&lt;NamespaceName&gt;(\\&lt;SubNamespaceNames&gt;)*\\&lt;ClassName&gt;\n</code></pre><ol>\n<li>必须有一个顶级namespace, 这个namespace也被称为 “vendor namespace”;</li>\n<li>可以有一个或多个 sub-namespace;</li>\n<li>结尾处必须有一个类的名字</li>\n<li>下划线(_)没有特殊的意义(不同于psr-0)</li>\n<li>名字中大小写组合无限制</li>\n<li>字母大小写敏感</li>\n</ol>\n<h2 id=\"根据类名来选择include哪个php文件\"><a href=\"#根据类名来选择include哪个php文件\" class=\"headerlink\" title=\"根据类名来选择include哪个php文件\"></a>根据类名来选择include哪个php文件</h2><ol>\n<li>顶级namespace对应到一个base目录</li>\n<li>sub-namespace逐级对应base目录下的子目录</li>\n<li>结尾处类名对应到<ClassName>.php文件</li>\n</ol>\n<h1 id=\"使用autoloading的坏处\"><a href=\"#使用autoloading的坏处\" class=\"headerlink\" title=\"使用autoloading的坏处\"></a>使用autoloading的坏处</h1><p>没法显示的看到require的顺序，给调试带来不便。</p>\n"},{"title":"PHP初级面试问题整理","date":"2015-02-12T16:00:00.000Z","_content":"\n\n### 简述面试者使用过的某一个框架？它的特性？ ###\n\nMVC; Autoloading; Model; Logger;\n\n### 面向对象特性的熟悉度 ###\n\n多态是什么？ 单例模式是怎么实现的？abstract抽象类可以作什么用？\n\n### Cookie 和 Session 的差别 ###\n\nSession的用处； 二者保存在的位置不同； Session的有效期（浏览器关闭后失效）；\n\n### PHP 中empty和isset的区别 ###\n\n对于empty\n\n- 假如参数未声明，会报一个warning；\n- { 0, 0.0, \"0\", \"\", NULL, 空数组, FALSE, 声明了但未赋值的变量, }\n\nisset\n\n声明过并且值不是NULL\n\n### PHP 有哪些方法可以用来调试代码 ###\n\nvar\\_dump和print\\_r的差别\n\nerror log\n\n### 有没有了解过PHP的一些编码规范 ###\n\nPEAR; PSR2; ZEND;\n\n你在写代码时遵循哪一种规范?\n\n### 正则表达式的掌握情况？ ###\n\n/2015/02/12/name => _posts/2015-02-12-name.html\n\n### 是否接触过Memcache ###\n\nMemcache是什么？使用场景？\n\n### 是否熟练使用 unix/linux 操作系统? ###\n\n文件权限的控制：\n\n- 如何改变一个文件的owner (chown)\n- 如何控制一个文件只能被owner访问 (chmod)\n- 如何拷贝一个目录 (cp -Rf, rsync)\n\n管道是什么？\n\n检索一个错误日志可以使用哪些shell命令\n\n### JS的熟悉程度 ###\n\n变量的作用域?\n\njQuery: 如何找到一个dom对象的所有带class active的a子元素。\n\n### 经常阅读哪些博客／网站? ###\n\n考察面试者是否是爱好做技术这件事，以及他获取信息的来源是否是一些比较优质的资源。\n\n### 喜欢阅读的技术书籍？举一些例子。 ###\n\n同上。\n\n### 简述你常用的开发工具，优点，为什么使用？ ###\n\n了解面试者是否有提高自己开发效率的意识。\n\n### 是否做过个人业余项目？ ###\n\n","source":"_posts/2015-02-13-php-interview-questions.md","raw":"---\ntitle: \"PHP初级面试问题整理\"\ndate: 2015-02-13 00:00:00\ntags: [php]\n---\n\n\n### 简述面试者使用过的某一个框架？它的特性？ ###\n\nMVC; Autoloading; Model; Logger;\n\n### 面向对象特性的熟悉度 ###\n\n多态是什么？ 单例模式是怎么实现的？abstract抽象类可以作什么用？\n\n### Cookie 和 Session 的差别 ###\n\nSession的用处； 二者保存在的位置不同； Session的有效期（浏览器关闭后失效）；\n\n### PHP 中empty和isset的区别 ###\n\n对于empty\n\n- 假如参数未声明，会报一个warning；\n- { 0, 0.0, \"0\", \"\", NULL, 空数组, FALSE, 声明了但未赋值的变量, }\n\nisset\n\n声明过并且值不是NULL\n\n### PHP 有哪些方法可以用来调试代码 ###\n\nvar\\_dump和print\\_r的差别\n\nerror log\n\n### 有没有了解过PHP的一些编码规范 ###\n\nPEAR; PSR2; ZEND;\n\n你在写代码时遵循哪一种规范?\n\n### 正则表达式的掌握情况？ ###\n\n/2015/02/12/name => _posts/2015-02-12-name.html\n\n### 是否接触过Memcache ###\n\nMemcache是什么？使用场景？\n\n### 是否熟练使用 unix/linux 操作系统? ###\n\n文件权限的控制：\n\n- 如何改变一个文件的owner (chown)\n- 如何控制一个文件只能被owner访问 (chmod)\n- 如何拷贝一个目录 (cp -Rf, rsync)\n\n管道是什么？\n\n检索一个错误日志可以使用哪些shell命令\n\n### JS的熟悉程度 ###\n\n变量的作用域?\n\njQuery: 如何找到一个dom对象的所有带class active的a子元素。\n\n### 经常阅读哪些博客／网站? ###\n\n考察面试者是否是爱好做技术这件事，以及他获取信息的来源是否是一些比较优质的资源。\n\n### 喜欢阅读的技术书籍？举一些例子。 ###\n\n同上。\n\n### 简述你常用的开发工具，优点，为什么使用？ ###\n\n了解面试者是否有提高自己开发效率的意识。\n\n### 是否做过个人业余项目？ ###\n\n","slug":"php-interview-questions","published":1,"updated":"2016-08-07T03:30:43.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirk26l6d000bjglm4urajiec","content":"<h3 id=\"简述面试者使用过的某一个框架？它的特性？\"><a href=\"#简述面试者使用过的某一个框架？它的特性？\" class=\"headerlink\" title=\"简述面试者使用过的某一个框架？它的特性？\"></a>简述面试者使用过的某一个框架？它的特性？</h3><p>MVC; Autoloading; Model; Logger;</p>\n<h3 id=\"面向对象特性的熟悉度\"><a href=\"#面向对象特性的熟悉度\" class=\"headerlink\" title=\"面向对象特性的熟悉度\"></a>面向对象特性的熟悉度</h3><p>多态是什么？ 单例模式是怎么实现的？abstract抽象类可以作什么用？</p>\n<h3 id=\"Cookie-和-Session-的差别\"><a href=\"#Cookie-和-Session-的差别\" class=\"headerlink\" title=\"Cookie 和 Session 的差别\"></a>Cookie 和 Session 的差别</h3><p>Session的用处； 二者保存在的位置不同； Session的有效期（浏览器关闭后失效）；</p>\n<h3 id=\"PHP-中empty和isset的区别\"><a href=\"#PHP-中empty和isset的区别\" class=\"headerlink\" title=\"PHP 中empty和isset的区别\"></a>PHP 中empty和isset的区别</h3><p>对于empty</p>\n<ul>\n<li>假如参数未声明，会报一个warning；</li>\n<li>{ 0, 0.0, “0”, “”, NULL, 空数组, FALSE, 声明了但未赋值的变量, }</li>\n</ul>\n<p>isset</p>\n<p>声明过并且值不是NULL</p>\n<h3 id=\"PHP-有哪些方法可以用来调试代码\"><a href=\"#PHP-有哪些方法可以用来调试代码\" class=\"headerlink\" title=\"PHP 有哪些方法可以用来调试代码\"></a>PHP 有哪些方法可以用来调试代码</h3><p>var_dump和print_r的差别</p>\n<p>error log</p>\n<h3 id=\"有没有了解过PHP的一些编码规范\"><a href=\"#有没有了解过PHP的一些编码规范\" class=\"headerlink\" title=\"有没有了解过PHP的一些编码规范\"></a>有没有了解过PHP的一些编码规范</h3><p>PEAR; PSR2; ZEND;</p>\n<p>你在写代码时遵循哪一种规范?</p>\n<h3 id=\"正则表达式的掌握情况？\"><a href=\"#正则表达式的掌握情况？\" class=\"headerlink\" title=\"正则表达式的掌握情况？\"></a>正则表达式的掌握情况？</h3><p>/2015/02/12/name =&gt; _posts/2015-02-12-name.html</p>\n<h3 id=\"是否接触过Memcache\"><a href=\"#是否接触过Memcache\" class=\"headerlink\" title=\"是否接触过Memcache\"></a>是否接触过Memcache</h3><p>Memcache是什么？使用场景？</p>\n<h3 id=\"是否熟练使用-unix-linux-操作系统\"><a href=\"#是否熟练使用-unix-linux-操作系统\" class=\"headerlink\" title=\"是否熟练使用 unix/linux 操作系统?\"></a>是否熟练使用 unix/linux 操作系统?</h3><p>文件权限的控制：</p>\n<ul>\n<li>如何改变一个文件的owner (chown)</li>\n<li>如何控制一个文件只能被owner访问 (chmod)</li>\n<li>如何拷贝一个目录 (cp -Rf, rsync)</li>\n</ul>\n<p>管道是什么？</p>\n<p>检索一个错误日志可以使用哪些shell命令</p>\n<h3 id=\"JS的熟悉程度\"><a href=\"#JS的熟悉程度\" class=\"headerlink\" title=\"JS的熟悉程度\"></a>JS的熟悉程度</h3><p>变量的作用域?</p>\n<p>jQuery: 如何找到一个dom对象的所有带class active的a子元素。</p>\n<h3 id=\"经常阅读哪些博客／网站\"><a href=\"#经常阅读哪些博客／网站\" class=\"headerlink\" title=\"经常阅读哪些博客／网站?\"></a>经常阅读哪些博客／网站?</h3><p>考察面试者是否是爱好做技术这件事，以及他获取信息的来源是否是一些比较优质的资源。</p>\n<h3 id=\"喜欢阅读的技术书籍？举一些例子。\"><a href=\"#喜欢阅读的技术书籍？举一些例子。\" class=\"headerlink\" title=\"喜欢阅读的技术书籍？举一些例子。\"></a>喜欢阅读的技术书籍？举一些例子。</h3><p>同上。</p>\n<h3 id=\"简述你常用的开发工具，优点，为什么使用？\"><a href=\"#简述你常用的开发工具，优点，为什么使用？\" class=\"headerlink\" title=\"简述你常用的开发工具，优点，为什么使用？\"></a>简述你常用的开发工具，优点，为什么使用？</h3><p>了解面试者是否有提高自己开发效率的意识。</p>\n<h3 id=\"是否做过个人业余项目？\"><a href=\"#是否做过个人业余项目？\" class=\"headerlink\" title=\"是否做过个人业余项目？\"></a>是否做过个人业余项目？</h3>","excerpt":"","more":"<h3 id=\"简述面试者使用过的某一个框架？它的特性？\"><a href=\"#简述面试者使用过的某一个框架？它的特性？\" class=\"headerlink\" title=\"简述面试者使用过的某一个框架？它的特性？\"></a>简述面试者使用过的某一个框架？它的特性？</h3><p>MVC; Autoloading; Model; Logger;</p>\n<h3 id=\"面向对象特性的熟悉度\"><a href=\"#面向对象特性的熟悉度\" class=\"headerlink\" title=\"面向对象特性的熟悉度\"></a>面向对象特性的熟悉度</h3><p>多态是什么？ 单例模式是怎么实现的？abstract抽象类可以作什么用？</p>\n<h3 id=\"Cookie-和-Session-的差别\"><a href=\"#Cookie-和-Session-的差别\" class=\"headerlink\" title=\"Cookie 和 Session 的差别\"></a>Cookie 和 Session 的差别</h3><p>Session的用处； 二者保存在的位置不同； Session的有效期（浏览器关闭后失效）；</p>\n<h3 id=\"PHP-中empty和isset的区别\"><a href=\"#PHP-中empty和isset的区别\" class=\"headerlink\" title=\"PHP 中empty和isset的区别\"></a>PHP 中empty和isset的区别</h3><p>对于empty</p>\n<ul>\n<li>假如参数未声明，会报一个warning；</li>\n<li>{ 0, 0.0, “0”, “”, NULL, 空数组, FALSE, 声明了但未赋值的变量, }</li>\n</ul>\n<p>isset</p>\n<p>声明过并且值不是NULL</p>\n<h3 id=\"PHP-有哪些方法可以用来调试代码\"><a href=\"#PHP-有哪些方法可以用来调试代码\" class=\"headerlink\" title=\"PHP 有哪些方法可以用来调试代码\"></a>PHP 有哪些方法可以用来调试代码</h3><p>var_dump和print_r的差别</p>\n<p>error log</p>\n<h3 id=\"有没有了解过PHP的一些编码规范\"><a href=\"#有没有了解过PHP的一些编码规范\" class=\"headerlink\" title=\"有没有了解过PHP的一些编码规范\"></a>有没有了解过PHP的一些编码规范</h3><p>PEAR; PSR2; ZEND;</p>\n<p>你在写代码时遵循哪一种规范?</p>\n<h3 id=\"正则表达式的掌握情况？\"><a href=\"#正则表达式的掌握情况？\" class=\"headerlink\" title=\"正则表达式的掌握情况？\"></a>正则表达式的掌握情况？</h3><p>/2015/02/12/name =&gt; _posts/2015-02-12-name.html</p>\n<h3 id=\"是否接触过Memcache\"><a href=\"#是否接触过Memcache\" class=\"headerlink\" title=\"是否接触过Memcache\"></a>是否接触过Memcache</h3><p>Memcache是什么？使用场景？</p>\n<h3 id=\"是否熟练使用-unix-linux-操作系统\"><a href=\"#是否熟练使用-unix-linux-操作系统\" class=\"headerlink\" title=\"是否熟练使用 unix/linux 操作系统?\"></a>是否熟练使用 unix/linux 操作系统?</h3><p>文件权限的控制：</p>\n<ul>\n<li>如何改变一个文件的owner (chown)</li>\n<li>如何控制一个文件只能被owner访问 (chmod)</li>\n<li>如何拷贝一个目录 (cp -Rf, rsync)</li>\n</ul>\n<p>管道是什么？</p>\n<p>检索一个错误日志可以使用哪些shell命令</p>\n<h3 id=\"JS的熟悉程度\"><a href=\"#JS的熟悉程度\" class=\"headerlink\" title=\"JS的熟悉程度\"></a>JS的熟悉程度</h3><p>变量的作用域?</p>\n<p>jQuery: 如何找到一个dom对象的所有带class active的a子元素。</p>\n<h3 id=\"经常阅读哪些博客／网站\"><a href=\"#经常阅读哪些博客／网站\" class=\"headerlink\" title=\"经常阅读哪些博客／网站?\"></a>经常阅读哪些博客／网站?</h3><p>考察面试者是否是爱好做技术这件事，以及他获取信息的来源是否是一些比较优质的资源。</p>\n<h3 id=\"喜欢阅读的技术书籍？举一些例子。\"><a href=\"#喜欢阅读的技术书籍？举一些例子。\" class=\"headerlink\" title=\"喜欢阅读的技术书籍？举一些例子。\"></a>喜欢阅读的技术书籍？举一些例子。</h3><p>同上。</p>\n<h3 id=\"简述你常用的开发工具，优点，为什么使用？\"><a href=\"#简述你常用的开发工具，优点，为什么使用？\" class=\"headerlink\" title=\"简述你常用的开发工具，优点，为什么使用？\"></a>简述你常用的开发工具，优点，为什么使用？</h3><p>了解面试者是否有提高自己开发效率的意识。</p>\n<h3 id=\"是否做过个人业余项目？\"><a href=\"#是否做过个人业余项目？\" class=\"headerlink\" title=\"是否做过个人业余项目？\"></a>是否做过个人业余项目？</h3>"},{"title":"Mac 上安装 Emacs 的几种选择","date":"2015-06-24T16:00:00.000Z","_content":"\n\n* brew 中的默认版本\n\n{% codeblock bash %}\n$ brew install --cocoa emacs\n$ brew linkapps emacs\n{% endcodeblock %}\n\n* 一个日本网友提供的版本，也是brew安装，很不错，推荐此版本。\n\n{% codeblock bash %}\n$ brew tap railwaycat/emacsmacport\n$ brew install emacs-mac\n$ brew linkapps emacs-mac\n{% endcodeblock %}\n\n* \"Emacs for Mac OS X\" http://emacsformacosx.com , 号称很Pure。\n\n* AquaEmacs：http://aquamacs.org\n","source":"_posts/2015-06-25-installing-emacs-on-mac.md","raw":"---\ntitle: \"Mac 上安装 Emacs 的几种选择\"\ndate: 2015-06-25 00:00:00\ntags: [emacs, osx, mac, software]\n---\n\n\n* brew 中的默认版本\n\n{% codeblock bash %}\n$ brew install --cocoa emacs\n$ brew linkapps emacs\n{% endcodeblock %}\n\n* 一个日本网友提供的版本，也是brew安装，很不错，推荐此版本。\n\n{% codeblock bash %}\n$ brew tap railwaycat/emacsmacport\n$ brew install emacs-mac\n$ brew linkapps emacs-mac\n{% endcodeblock %}\n\n* \"Emacs for Mac OS X\" http://emacsformacosx.com , 号称很Pure。\n\n* AquaEmacs：http://aquamacs.org\n","slug":"installing-emacs-on-mac","published":1,"updated":"2016-08-07T03:31:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirk26l6f000djglmrt0l40zo","content":"<ul>\n<li>brew 中的默认版本</li>\n</ul>\n<figure class=\"highlight plain\"><figcaption><span>bash</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ brew install --cocoa emacs</div><div class=\"line\">$ brew linkapps emacs</div></pre></td></tr></table></figure>\n<ul>\n<li>一个日本网友提供的版本，也是brew安装，很不错，推荐此版本。</li>\n</ul>\n<figure class=\"highlight plain\"><figcaption><span>bash</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ brew tap railwaycat/emacsmacport</div><div class=\"line\">$ brew install emacs-mac</div><div class=\"line\">$ brew linkapps emacs-mac</div></pre></td></tr></table></figure>\n<ul>\n<li><p>“Emacs for Mac OS X” <a href=\"http://emacsformacosx.com\" target=\"_blank\" rel=\"external\">http://emacsformacosx.com</a> , 号称很Pure。</p>\n</li>\n<li><p>AquaEmacs：<a href=\"http://aquamacs.org\" target=\"_blank\" rel=\"external\">http://aquamacs.org</a></p>\n</li>\n</ul>\n","excerpt":"","more":"<ul>\n<li>brew 中的默认版本</li>\n</ul>\n<figure class=\"highlight plain\"><figcaption><span>bash</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ brew install --cocoa emacs</div><div class=\"line\">$ brew linkapps emacs</div></pre></td></tr></table></figure>\n<ul>\n<li>一个日本网友提供的版本，也是brew安装，很不错，推荐此版本。</li>\n</ul>\n<figure class=\"highlight plain\"><figcaption><span>bash</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ brew tap railwaycat/emacsmacport</div><div class=\"line\">$ brew install emacs-mac</div><div class=\"line\">$ brew linkapps emacs-mac</div></pre></td></tr></table></figure>\n<ul>\n<li><p>“Emacs for Mac OS X” <a href=\"http://emacsformacosx.com\">http://emacsformacosx.com</a> , 号称很Pure。</p>\n</li>\n<li><p>AquaEmacs：<a href=\"http://aquamacs.org\">http://aquamacs.org</a></p>\n</li>\n</ul>\n"},{"title":"Installing Jekyll","date":"2015-06-24T16:00:00.000Z","_content":"\n\n1. Install Ruby and gem.\n\n2. $ gem install jekyll\n\n3. $ jekyll new blog\n\n4. Writing a new blog entry and save it to yyyy-mm-dd-blog-entry-name.md.\n\n5. $ jekyll build\n\n6. $ jekyll serve\n","source":"_posts/2015-06-25-installing-jekyll.md","raw":"---\ntitle: \"Installing Jekyll\"\ndate: 2015-06-25 00:00:00\ntags: [jekyll]\n---\n\n\n1. Install Ruby and gem.\n\n2. $ gem install jekyll\n\n3. $ jekyll new blog\n\n4. Writing a new blog entry and save it to yyyy-mm-dd-blog-entry-name.md.\n\n5. $ jekyll build\n\n6. $ jekyll serve\n","slug":"installing-jekyll","published":1,"updated":"2016-08-07T03:31:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirk26l6g000fjglmmsa77r2u","content":"<ol>\n<li><p>Install Ruby and gem.</p>\n</li>\n<li><p>$ gem install jekyll</p>\n</li>\n<li><p>$ jekyll new blog</p>\n</li>\n<li><p>Writing a new blog entry and save it to yyyy-mm-dd-blog-entry-name.md.</p>\n</li>\n<li><p>$ jekyll build</p>\n</li>\n<li><p>$ jekyll serve</p>\n</li>\n</ol>\n","excerpt":"","more":"<ol>\n<li><p>Install Ruby and gem.</p>\n</li>\n<li><p>$ gem install jekyll</p>\n</li>\n<li><p>$ jekyll new blog</p>\n</li>\n<li><p>Writing a new blog entry and save it to yyyy-mm-dd-blog-entry-name.md.</p>\n</li>\n<li><p>$ jekyll build</p>\n</li>\n<li><p>$ jekyll serve</p>\n</li>\n</ol>\n"},{"title":"git-svn 的使用","date":"2015-05-24T16:00:00.000Z","_content":"\n\n团队用了很多年的svn，短时间内看不到切换到git进行版本管理的可能。\n\nsvn当然足够用了。可惜用过git之后就不再这么觉得。\n\n分布式带来的离线提交的好处倒是其次。关键是git让我喜欢branch，你能想象在svn里面每天几次进行branch切换和merging吗？ 有了branch之后，开发流程管理变得简单了。只有当一个功能准备上线时才将这个功能分支 merge 到 master 分支。这样就保证了一个功能尚未完成时永远不影响 线上版本（master）的小版本更新。\n\n所以我的开发环境使用 git，用 git-svn 这个工具提交代码到 svn 版本库。\n\n具体的流程是这样：\n\n#### 1. 检出 svn 版本库 ####\n\n{% codeblock bash %}\n$ git svn clone http://svn.repo.url/project\n{% endcodeblock %}\n\n\n#### 2. 本地有了一个 git 库，里面有所有 svn 历史提交，并且有一个特殊的 remote 分支叫做 git-svn 。可以用下面这个命令查看。 ####\n\n{% codeblock bash %}\n$ git branch -a\n{% endcodeblock %}\n\n#### 3. O.K. 现在本地是 git 库了，你就像使用其他 git 项目一样的使用它，甚至你可以添加其他 remote 。当你想把代码提交到 svn 。 ####\n\n{% codeblock bash %}\n$ git svn dcommit\n{% endcodeblock %}\n\n这个命令会把当前 git 分支的最近一次 commit 提交到 git-svn 这个 remote 分支，并且 push 到 svn 服务器。\n\n\n#### 4. 那 svn up 用什么代替？ 用这个命令： ####\n\n{% codeblock bash %}\n$ git svn rebase\n{% endcodeblock %}\n\nO.K. 这样就可以满足大部分的使用场景了。\n\n相关的文档可以看这里： https://www.kernel.org/pub/software/scm/git/docs/git-svn.html\n","source":"_posts/2015-06-25-using-git-svn.md","raw":"---\ntitle: \"git-svn 的使用\"\ndate: 2015-05-25 00:00:00\ntags: [git, software]\n---\n\n\n团队用了很多年的svn，短时间内看不到切换到git进行版本管理的可能。\n\nsvn当然足够用了。可惜用过git之后就不再这么觉得。\n\n分布式带来的离线提交的好处倒是其次。关键是git让我喜欢branch，你能想象在svn里面每天几次进行branch切换和merging吗？ 有了branch之后，开发流程管理变得简单了。只有当一个功能准备上线时才将这个功能分支 merge 到 master 分支。这样就保证了一个功能尚未完成时永远不影响 线上版本（master）的小版本更新。\n\n所以我的开发环境使用 git，用 git-svn 这个工具提交代码到 svn 版本库。\n\n具体的流程是这样：\n\n#### 1. 检出 svn 版本库 ####\n\n{% codeblock bash %}\n$ git svn clone http://svn.repo.url/project\n{% endcodeblock %}\n\n\n#### 2. 本地有了一个 git 库，里面有所有 svn 历史提交，并且有一个特殊的 remote 分支叫做 git-svn 。可以用下面这个命令查看。 ####\n\n{% codeblock bash %}\n$ git branch -a\n{% endcodeblock %}\n\n#### 3. O.K. 现在本地是 git 库了，你就像使用其他 git 项目一样的使用它，甚至你可以添加其他 remote 。当你想把代码提交到 svn 。 ####\n\n{% codeblock bash %}\n$ git svn dcommit\n{% endcodeblock %}\n\n这个命令会把当前 git 分支的最近一次 commit 提交到 git-svn 这个 remote 分支，并且 push 到 svn 服务器。\n\n\n#### 4. 那 svn up 用什么代替？ 用这个命令： ####\n\n{% codeblock bash %}\n$ git svn rebase\n{% endcodeblock %}\n\nO.K. 这样就可以满足大部分的使用场景了。\n\n相关的文档可以看这里： https://www.kernel.org/pub/software/scm/git/docs/git-svn.html\n","slug":"using-git-svn","published":1,"updated":"2016-08-07T03:32:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirk26l6h000gjglmbcfv1pt6","content":"<p>团队用了很多年的svn，短时间内看不到切换到git进行版本管理的可能。</p>\n<p>svn当然足够用了。可惜用过git之后就不再这么觉得。</p>\n<p>分布式带来的离线提交的好处倒是其次。关键是git让我喜欢branch，你能想象在svn里面每天几次进行branch切换和merging吗？ 有了branch之后，开发流程管理变得简单了。只有当一个功能准备上线时才将这个功能分支 merge 到 master 分支。这样就保证了一个功能尚未完成时永远不影响 线上版本（master）的小版本更新。</p>\n<p>所以我的开发环境使用 git，用 git-svn 这个工具提交代码到 svn 版本库。</p>\n<p>具体的流程是这样：</p>\n<h4 id=\"1-检出-svn-版本库\"><a href=\"#1-检出-svn-版本库\" class=\"headerlink\" title=\"1. 检出 svn 版本库\"></a>1. 检出 svn 版本库</h4><figure class=\"highlight plain\"><figcaption><span>bash</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git svn clone http://svn.repo.url/project</div></pre></td></tr></table></figure>\n<h4 id=\"2-本地有了一个-git-库，里面有所有-svn-历史提交，并且有一个特殊的-remote-分支叫做-git-svn-。可以用下面这个命令查看。\"><a href=\"#2-本地有了一个-git-库，里面有所有-svn-历史提交，并且有一个特殊的-remote-分支叫做-git-svn-。可以用下面这个命令查看。\" class=\"headerlink\" title=\"2. 本地有了一个 git 库，里面有所有 svn 历史提交，并且有一个特殊的 remote 分支叫做 git-svn 。可以用下面这个命令查看。\"></a>2. 本地有了一个 git 库，里面有所有 svn 历史提交，并且有一个特殊的 remote 分支叫做 git-svn 。可以用下面这个命令查看。</h4><figure class=\"highlight plain\"><figcaption><span>bash</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git branch -a</div></pre></td></tr></table></figure>\n<h4 id=\"3-O-K-现在本地是-git-库了，你就像使用其他-git-项目一样的使用它，甚至你可以添加其他-remote-。当你想把代码提交到-svn-。\"><a href=\"#3-O-K-现在本地是-git-库了，你就像使用其他-git-项目一样的使用它，甚至你可以添加其他-remote-。当你想把代码提交到-svn-。\" class=\"headerlink\" title=\"3. O.K. 现在本地是 git 库了，你就像使用其他 git 项目一样的使用它，甚至你可以添加其他 remote 。当你想把代码提交到 svn 。\"></a>3. O.K. 现在本地是 git 库了，你就像使用其他 git 项目一样的使用它，甚至你可以添加其他 remote 。当你想把代码提交到 svn 。</h4><figure class=\"highlight plain\"><figcaption><span>bash</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git svn dcommit</div></pre></td></tr></table></figure>\n<p>这个命令会把当前 git 分支的最近一次 commit 提交到 git-svn 这个 remote 分支，并且 push 到 svn 服务器。</p>\n<h4 id=\"4-那-svn-up-用什么代替？-用这个命令：\"><a href=\"#4-那-svn-up-用什么代替？-用这个命令：\" class=\"headerlink\" title=\"4. 那 svn up 用什么代替？ 用这个命令：\"></a>4. 那 svn up 用什么代替？ 用这个命令：</h4><figure class=\"highlight plain\"><figcaption><span>bash</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git svn rebase</div></pre></td></tr></table></figure>\n<p>O.K. 这样就可以满足大部分的使用场景了。</p>\n<p>相关的文档可以看这里： <a href=\"https://www.kernel.org/pub/software/scm/git/docs/git-svn.html\" target=\"_blank\" rel=\"external\">https://www.kernel.org/pub/software/scm/git/docs/git-svn.html</a></p>\n","excerpt":"","more":"<p>团队用了很多年的svn，短时间内看不到切换到git进行版本管理的可能。</p>\n<p>svn当然足够用了。可惜用过git之后就不再这么觉得。</p>\n<p>分布式带来的离线提交的好处倒是其次。关键是git让我喜欢branch，你能想象在svn里面每天几次进行branch切换和merging吗？ 有了branch之后，开发流程管理变得简单了。只有当一个功能准备上线时才将这个功能分支 merge 到 master 分支。这样就保证了一个功能尚未完成时永远不影响 线上版本（master）的小版本更新。</p>\n<p>所以我的开发环境使用 git，用 git-svn 这个工具提交代码到 svn 版本库。</p>\n<p>具体的流程是这样：</p>\n<h4 id=\"1-检出-svn-版本库\"><a href=\"#1-检出-svn-版本库\" class=\"headerlink\" title=\"1. 检出 svn 版本库\"></a>1. 检出 svn 版本库</h4><figure class=\"highlight plain\"><figcaption><span>bash</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git svn clone http://svn.repo.url/project</div></pre></td></tr></table></figure>\n<h4 id=\"2-本地有了一个-git-库，里面有所有-svn-历史提交，并且有一个特殊的-remote-分支叫做-git-svn-。可以用下面这个命令查看。\"><a href=\"#2-本地有了一个-git-库，里面有所有-svn-历史提交，并且有一个特殊的-remote-分支叫做-git-svn-。可以用下面这个命令查看。\" class=\"headerlink\" title=\"2. 本地有了一个 git 库，里面有所有 svn 历史提交，并且有一个特殊的 remote 分支叫做 git-svn 。可以用下面这个命令查看。\"></a>2. 本地有了一个 git 库，里面有所有 svn 历史提交，并且有一个特殊的 remote 分支叫做 git-svn 。可以用下面这个命令查看。</h4><figure class=\"highlight plain\"><figcaption><span>bash</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git branch -a</div></pre></td></tr></table></figure>\n<h4 id=\"3-O-K-现在本地是-git-库了，你就像使用其他-git-项目一样的使用它，甚至你可以添加其他-remote-。当你想把代码提交到-svn-。\"><a href=\"#3-O-K-现在本地是-git-库了，你就像使用其他-git-项目一样的使用它，甚至你可以添加其他-remote-。当你想把代码提交到-svn-。\" class=\"headerlink\" title=\"3. O.K. 现在本地是 git 库了，你就像使用其他 git 项目一样的使用它，甚至你可以添加其他 remote 。当你想把代码提交到 svn 。\"></a>3. O.K. 现在本地是 git 库了，你就像使用其他 git 项目一样的使用它，甚至你可以添加其他 remote 。当你想把代码提交到 svn 。</h4><figure class=\"highlight plain\"><figcaption><span>bash</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git svn dcommit</div></pre></td></tr></table></figure>\n<p>这个命令会把当前 git 分支的最近一次 commit 提交到 git-svn 这个 remote 分支，并且 push 到 svn 服务器。</p>\n<h4 id=\"4-那-svn-up-用什么代替？-用这个命令：\"><a href=\"#4-那-svn-up-用什么代替？-用这个命令：\" class=\"headerlink\" title=\"4. 那 svn up 用什么代替？ 用这个命令：\"></a>4. 那 svn up 用什么代替？ 用这个命令：</h4><figure class=\"highlight plain\"><figcaption><span>bash</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git svn rebase</div></pre></td></tr></table></figure>\n<p>O.K. 这样就可以满足大部分的使用场景了。</p>\n<p>相关的文档可以看这里： <a href=\"https://www.kernel.org/pub/software/scm/git/docs/git-svn.html\">https://www.kernel.org/pub/software/scm/git/docs/git-svn.html</a></p>\n"},{"title":"dired 常用命令","date":"2015-07-24T16:00:00.000Z","_content":"\n\nMost commands operate on the marked files and use the current file if no files are marked.\n\nUse a numeric prefix argument to operate on the next ARG (or previous -ARG if ARG<0) files, or just `1' to operate on the current file only.\n\n### 最常用的 ###\n\n\\+ => dired-create-directory\n\nQ => dired-do-query-replace-regexp\n\nd => 标记一个文件删除\n\nm => Mark 并等待后续动作\n\nu => Unmark\n\nDEL => 上移一行，并且 unmark 或 unflag\n\nx => 执行删除标记了 'D' 的那些文件\n\nRET => 打开当前行对应的文件(如是目录则新建一个 dired buffer) , 在当前 window 打开\n\no => 同上，但是在 other-window\n\ni => 在当前 dired buffer 中添加光标所在行对应的子目录\n\nR => 重命名当前行对应的文件， 或者将 mark 了的文件移动至另一个目录\n\nC => 拷贝一个或多个文件\n\ns => Toggle Sorting by name/date. C-u s => Change the 'ls' switches\n\ng => Read (refresh) all currently expanded directories aGain\n\n! => dired-do-shell-command, & => dired-do-async-shell-command\n\n$ => Folding a dir, dired-hide-subdir\n\n. => dired-clean-directory\n\nt => dired-toggle-marks\n\nU => dired-unmark-all-marks\n\nS => dired-do-symlink\n\nT => dired-do-touch\n\n### 次常用的 ###\n\nM => dired-do-chmod\n\nG => dired-do-chgrp\n\nO => dired-do-chown\n\nZ => dired-do-compress\n\ny => dired-show-file-type\n\n~ => dired-flag-backup-files\n\nM-{ , M-} => Goto Prev/Next Marked File\n\n### % 前缀 ###\n\n% l => 将 mark 了的文件的名称转小写字母\n\n% u => 类上， 转大写字母\n\n% m => dired-mark-files-regexp\n\n% r => dired-do-rename-regexp, 批量重命名文件\n\n% g => 正则查询文件内容，并 Mark 搜索匹配成功的文件\n\n% C => 根据 regexp 搜索 Mark 了的文件名，并拷贝到指定位置\n\n### * 前缀 ###\n","source":"_posts/2015-07-15-dired.md","raw":"---\ntitle: \"dired 常用命令\"\ndate: 2015-07-25 00:00:00\ntags: [emacs]\n---\n\n\nMost commands operate on the marked files and use the current file if no files are marked.\n\nUse a numeric prefix argument to operate on the next ARG (or previous -ARG if ARG<0) files, or just `1' to operate on the current file only.\n\n### 最常用的 ###\n\n\\+ => dired-create-directory\n\nQ => dired-do-query-replace-regexp\n\nd => 标记一个文件删除\n\nm => Mark 并等待后续动作\n\nu => Unmark\n\nDEL => 上移一行，并且 unmark 或 unflag\n\nx => 执行删除标记了 'D' 的那些文件\n\nRET => 打开当前行对应的文件(如是目录则新建一个 dired buffer) , 在当前 window 打开\n\no => 同上，但是在 other-window\n\ni => 在当前 dired buffer 中添加光标所在行对应的子目录\n\nR => 重命名当前行对应的文件， 或者将 mark 了的文件移动至另一个目录\n\nC => 拷贝一个或多个文件\n\ns => Toggle Sorting by name/date. C-u s => Change the 'ls' switches\n\ng => Read (refresh) all currently expanded directories aGain\n\n! => dired-do-shell-command, & => dired-do-async-shell-command\n\n$ => Folding a dir, dired-hide-subdir\n\n. => dired-clean-directory\n\nt => dired-toggle-marks\n\nU => dired-unmark-all-marks\n\nS => dired-do-symlink\n\nT => dired-do-touch\n\n### 次常用的 ###\n\nM => dired-do-chmod\n\nG => dired-do-chgrp\n\nO => dired-do-chown\n\nZ => dired-do-compress\n\ny => dired-show-file-type\n\n~ => dired-flag-backup-files\n\nM-{ , M-} => Goto Prev/Next Marked File\n\n### % 前缀 ###\n\n% l => 将 mark 了的文件的名称转小写字母\n\n% u => 类上， 转大写字母\n\n% m => dired-mark-files-regexp\n\n% r => dired-do-rename-regexp, 批量重命名文件\n\n% g => 正则查询文件内容，并 Mark 搜索匹配成功的文件\n\n% C => 根据 regexp 搜索 Mark 了的文件名，并拷贝到指定位置\n\n### * 前缀 ###\n","slug":"dired","published":1,"updated":"2016-08-07T03:33:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirk26l6k000ijglmvve97a60","content":"<p>Most commands operate on the marked files and use the current file if no files are marked.</p>\n<p>Use a numeric prefix argument to operate on the next ARG (or previous -ARG if ARG&lt;0) files, or just `1’ to operate on the current file only.</p>\n<h3 id=\"最常用的\"><a href=\"#最常用的\" class=\"headerlink\" title=\"最常用的\"></a>最常用的</h3><p>+ =&gt; dired-create-directory</p>\n<p>Q =&gt; dired-do-query-replace-regexp</p>\n<p>d =&gt; 标记一个文件删除</p>\n<p>m =&gt; Mark 并等待后续动作</p>\n<p>u =&gt; Unmark</p>\n<p>DEL =&gt; 上移一行，并且 unmark 或 unflag</p>\n<p>x =&gt; 执行删除标记了 ‘D’ 的那些文件</p>\n<p>RET =&gt; 打开当前行对应的文件(如是目录则新建一个 dired buffer) , 在当前 window 打开</p>\n<p>o =&gt; 同上，但是在 other-window</p>\n<p>i =&gt; 在当前 dired buffer 中添加光标所在行对应的子目录</p>\n<p>R =&gt; 重命名当前行对应的文件， 或者将 mark 了的文件移动至另一个目录</p>\n<p>C =&gt; 拷贝一个或多个文件</p>\n<p>s =&gt; Toggle Sorting by name/date. C-u s =&gt; Change the ‘ls’ switches</p>\n<p>g =&gt; Read (refresh) all currently expanded directories aGain</p>\n<p>! =&gt; dired-do-shell-command, &amp; =&gt; dired-do-async-shell-command</p>\n<p>$ =&gt; Folding a dir, dired-hide-subdir</p>\n<p>. =&gt; dired-clean-directory</p>\n<p>t =&gt; dired-toggle-marks</p>\n<p>U =&gt; dired-unmark-all-marks</p>\n<p>S =&gt; dired-do-symlink</p>\n<p>T =&gt; dired-do-touch</p>\n<h3 id=\"次常用的\"><a href=\"#次常用的\" class=\"headerlink\" title=\"次常用的\"></a>次常用的</h3><p>M =&gt; dired-do-chmod</p>\n<p>G =&gt; dired-do-chgrp</p>\n<p>O =&gt; dired-do-chown</p>\n<p>Z =&gt; dired-do-compress</p>\n<p>y =&gt; dired-show-file-type</p>\n<p>~ =&gt; dired-flag-backup-files</p>\n<p>M-{ , M-} =&gt; Goto Prev/Next Marked File</p>\n<h3 id=\"前缀\"><a href=\"#前缀\" class=\"headerlink\" title=\"% 前缀\"></a>% 前缀</h3><p>% l =&gt; 将 mark 了的文件的名称转小写字母</p>\n<p>% u =&gt; 类上， 转大写字母</p>\n<p>% m =&gt; dired-mark-files-regexp</p>\n<p>% r =&gt; dired-do-rename-regexp, 批量重命名文件</p>\n<p>% g =&gt; 正则查询文件内容，并 Mark 搜索匹配成功的文件</p>\n<p>% C =&gt; 根据 regexp 搜索 Mark 了的文件名，并拷贝到指定位置</p>\n<h3 id=\"前缀-1\"><a href=\"#前缀-1\" class=\"headerlink\" title=\"* 前缀\"></a>* 前缀</h3>","excerpt":"","more":"<p>Most commands operate on the marked files and use the current file if no files are marked.</p>\n<p>Use a numeric prefix argument to operate on the next ARG (or previous -ARG if ARG&lt;0) files, or just `1’ to operate on the current file only.</p>\n<h3 id=\"最常用的\"><a href=\"#最常用的\" class=\"headerlink\" title=\"最常用的\"></a>最常用的</h3><p>+ =&gt; dired-create-directory</p>\n<p>Q =&gt; dired-do-query-replace-regexp</p>\n<p>d =&gt; 标记一个文件删除</p>\n<p>m =&gt; Mark 并等待后续动作</p>\n<p>u =&gt; Unmark</p>\n<p>DEL =&gt; 上移一行，并且 unmark 或 unflag</p>\n<p>x =&gt; 执行删除标记了 ‘D’ 的那些文件</p>\n<p>RET =&gt; 打开当前行对应的文件(如是目录则新建一个 dired buffer) , 在当前 window 打开</p>\n<p>o =&gt; 同上，但是在 other-window</p>\n<p>i =&gt; 在当前 dired buffer 中添加光标所在行对应的子目录</p>\n<p>R =&gt; 重命名当前行对应的文件， 或者将 mark 了的文件移动至另一个目录</p>\n<p>C =&gt; 拷贝一个或多个文件</p>\n<p>s =&gt; Toggle Sorting by name/date. C-u s =&gt; Change the ‘ls’ switches</p>\n<p>g =&gt; Read (refresh) all currently expanded directories aGain</p>\n<p>! =&gt; dired-do-shell-command, &amp; =&gt; dired-do-async-shell-command</p>\n<p>$ =&gt; Folding a dir, dired-hide-subdir</p>\n<p>. =&gt; dired-clean-directory</p>\n<p>t =&gt; dired-toggle-marks</p>\n<p>U =&gt; dired-unmark-all-marks</p>\n<p>S =&gt; dired-do-symlink</p>\n<p>T =&gt; dired-do-touch</p>\n<h3 id=\"次常用的\"><a href=\"#次常用的\" class=\"headerlink\" title=\"次常用的\"></a>次常用的</h3><p>M =&gt; dired-do-chmod</p>\n<p>G =&gt; dired-do-chgrp</p>\n<p>O =&gt; dired-do-chown</p>\n<p>Z =&gt; dired-do-compress</p>\n<p>y =&gt; dired-show-file-type</p>\n<p>~ =&gt; dired-flag-backup-files</p>\n<p>M-{ , M-} =&gt; Goto Prev/Next Marked File</p>\n<h3 id=\"前缀\"><a href=\"#前缀\" class=\"headerlink\" title=\"% 前缀\"></a>% 前缀</h3><p>% l =&gt; 将 mark 了的文件的名称转小写字母</p>\n<p>% u =&gt; 类上， 转大写字母</p>\n<p>% m =&gt; dired-mark-files-regexp</p>\n<p>% r =&gt; dired-do-rename-regexp, 批量重命名文件</p>\n<p>% g =&gt; 正则查询文件内容，并 Mark 搜索匹配成功的文件</p>\n<p>% C =&gt; 根据 regexp 搜索 Mark 了的文件名，并拷贝到指定位置</p>\n<h3 id=\"前缀-1\"><a href=\"#前缀-1\" class=\"headerlink\" title=\"* 前缀\"></a>* 前缀</h3>"},{"title":"My Favourite Emacs Modes - Projectile","date":"2015-08-13T16:00:00.000Z","_content":"\n\n### Projectile 解决的问题 ###\n\n通常我们写程序时会同时打开几个项目，在不同项目的代码文件之间跳来跳去。Projectile 实现了快捷的查找项目内文件或另一项目内的文件。另外还能实现项目内 grep。\n\n### 如何安装 ###\n\n{% codeblock lisp %}\n(require-package 'projectile)\n(projectile-global-mode)\n(setq projectile-enable-caching t)\n{% endcodeblock %}\n\n### 如何使用 ###\n\n对于被 version control 了的项目，不需要做任何配置 Projectile 即可识别并以版本库为单元区分项目。\n\n假如一个项目还没有版本控制，那我们可以在项目的根目录下创建 .projectile 这样一个空白文件，于是这个目录就被 projecctile 识别为项目根目录。\n\n### 常见 command ###\n\nC-c p f => projectile-find-file, 查找当前文件项目的一个文件。\n\nC-c p p => projectile-switch-project, 切换项目并查找那个项目中的文件。\n\nC-c p b => projectile-switch-to-buffer, 切换到项目内某一个 buffer。 假如不用 projectile，我们只能用 C-x b 切换buffer， 这时候提供候选的buffer会包含所有emacs打开了的buffer（最近使用的排在前面），那经常的我们只想切换到本项目内最近打开的某个buffer，假如用 C-x b 则多了很多干扰。\n\nC-c p I => projectile-ibuffer, 查看项目中打开了哪些buffer，并对某些buffer进行操作。\n\nC-c p ! => projectile-run-shell-command-in-root, 在项目根目录处运行一个shell命令。\n\nC-c p & => projectile-run-async-shell-command-in-root, 异步运行shell命令。\n\nC-c p S => projectile-save-project-buffers, 保存本项目中所有打开的buffer。\n\nC-c p k => projectile-kill-buffers, 关闭本项目中所有打开的buffer。\n\nC-c p r => projectile-replace, 项目中批量替换文本。\n\nC-c p s g => projectile-grep, 项目中grep。\n\nC-c p 4 f => projectile-find-file-other-window, 在项目中查找文件并在另一个window中打开。\n","source":"_posts/2015-08-14-emacs-projectile.md","raw":"---\ntitle: \"My Favourite Emacs Modes - Projectile\"\ndate: 2015-08-14 00:00:00\ntags: [emacs]\n---\n\n\n### Projectile 解决的问题 ###\n\n通常我们写程序时会同时打开几个项目，在不同项目的代码文件之间跳来跳去。Projectile 实现了快捷的查找项目内文件或另一项目内的文件。另外还能实现项目内 grep。\n\n### 如何安装 ###\n\n{% codeblock lisp %}\n(require-package 'projectile)\n(projectile-global-mode)\n(setq projectile-enable-caching t)\n{% endcodeblock %}\n\n### 如何使用 ###\n\n对于被 version control 了的项目，不需要做任何配置 Projectile 即可识别并以版本库为单元区分项目。\n\n假如一个项目还没有版本控制，那我们可以在项目的根目录下创建 .projectile 这样一个空白文件，于是这个目录就被 projecctile 识别为项目根目录。\n\n### 常见 command ###\n\nC-c p f => projectile-find-file, 查找当前文件项目的一个文件。\n\nC-c p p => projectile-switch-project, 切换项目并查找那个项目中的文件。\n\nC-c p b => projectile-switch-to-buffer, 切换到项目内某一个 buffer。 假如不用 projectile，我们只能用 C-x b 切换buffer， 这时候提供候选的buffer会包含所有emacs打开了的buffer（最近使用的排在前面），那经常的我们只想切换到本项目内最近打开的某个buffer，假如用 C-x b 则多了很多干扰。\n\nC-c p I => projectile-ibuffer, 查看项目中打开了哪些buffer，并对某些buffer进行操作。\n\nC-c p ! => projectile-run-shell-command-in-root, 在项目根目录处运行一个shell命令。\n\nC-c p & => projectile-run-async-shell-command-in-root, 异步运行shell命令。\n\nC-c p S => projectile-save-project-buffers, 保存本项目中所有打开的buffer。\n\nC-c p k => projectile-kill-buffers, 关闭本项目中所有打开的buffer。\n\nC-c p r => projectile-replace, 项目中批量替换文本。\n\nC-c p s g => projectile-grep, 项目中grep。\n\nC-c p 4 f => projectile-find-file-other-window, 在项目中查找文件并在另一个window中打开。\n","slug":"emacs-projectile","published":1,"updated":"2016-08-07T03:33:34.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirk26l6l000jjglmorparsxk","content":"<h3 id=\"Projectile-解决的问题\"><a href=\"#Projectile-解决的问题\" class=\"headerlink\" title=\"Projectile 解决的问题\"></a>Projectile 解决的问题</h3><p>通常我们写程序时会同时打开几个项目，在不同项目的代码文件之间跳来跳去。Projectile 实现了快捷的查找项目内文件或另一项目内的文件。另外还能实现项目内 grep。</p>\n<h3 id=\"如何安装\"><a href=\"#如何安装\" class=\"headerlink\" title=\"如何安装\"></a>如何安装</h3><figure class=\"highlight plain\"><figcaption><span>lisp</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">(require-package &apos;projectile)</div><div class=\"line\">(projectile-global-mode)</div><div class=\"line\">(setq projectile-enable-caching t)</div></pre></td></tr></table></figure>\n<h3 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a>如何使用</h3><p>对于被 version control 了的项目，不需要做任何配置 Projectile 即可识别并以版本库为单元区分项目。</p>\n<p>假如一个项目还没有版本控制，那我们可以在项目的根目录下创建 .projectile 这样一个空白文件，于是这个目录就被 projecctile 识别为项目根目录。</p>\n<h3 id=\"常见-command\"><a href=\"#常见-command\" class=\"headerlink\" title=\"常见 command\"></a>常见 command</h3><p>C-c p f =&gt; projectile-find-file, 查找当前文件项目的一个文件。</p>\n<p>C-c p p =&gt; projectile-switch-project, 切换项目并查找那个项目中的文件。</p>\n<p>C-c p b =&gt; projectile-switch-to-buffer, 切换到项目内某一个 buffer。 假如不用 projectile，我们只能用 C-x b 切换buffer， 这时候提供候选的buffer会包含所有emacs打开了的buffer（最近使用的排在前面），那经常的我们只想切换到本项目内最近打开的某个buffer，假如用 C-x b 则多了很多干扰。</p>\n<p>C-c p I =&gt; projectile-ibuffer, 查看项目中打开了哪些buffer，并对某些buffer进行操作。</p>\n<p>C-c p ! =&gt; projectile-run-shell-command-in-root, 在项目根目录处运行一个shell命令。</p>\n<p>C-c p &amp; =&gt; projectile-run-async-shell-command-in-root, 异步运行shell命令。</p>\n<p>C-c p S =&gt; projectile-save-project-buffers, 保存本项目中所有打开的buffer。</p>\n<p>C-c p k =&gt; projectile-kill-buffers, 关闭本项目中所有打开的buffer。</p>\n<p>C-c p r =&gt; projectile-replace, 项目中批量替换文本。</p>\n<p>C-c p s g =&gt; projectile-grep, 项目中grep。</p>\n<p>C-c p 4 f =&gt; projectile-find-file-other-window, 在项目中查找文件并在另一个window中打开。</p>\n","excerpt":"","more":"<h3 id=\"Projectile-解决的问题\"><a href=\"#Projectile-解决的问题\" class=\"headerlink\" title=\"Projectile 解决的问题\"></a>Projectile 解决的问题</h3><p>通常我们写程序时会同时打开几个项目，在不同项目的代码文件之间跳来跳去。Projectile 实现了快捷的查找项目内文件或另一项目内的文件。另外还能实现项目内 grep。</p>\n<h3 id=\"如何安装\"><a href=\"#如何安装\" class=\"headerlink\" title=\"如何安装\"></a>如何安装</h3><figure class=\"highlight plain\"><figcaption><span>lisp</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">(require-package &apos;projectile)</div><div class=\"line\">(projectile-global-mode)</div><div class=\"line\">(setq projectile-enable-caching t)</div></pre></td></tr></table></figure>\n<h3 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a>如何使用</h3><p>对于被 version control 了的项目，不需要做任何配置 Projectile 即可识别并以版本库为单元区分项目。</p>\n<p>假如一个项目还没有版本控制，那我们可以在项目的根目录下创建 .projectile 这样一个空白文件，于是这个目录就被 projecctile 识别为项目根目录。</p>\n<h3 id=\"常见-command\"><a href=\"#常见-command\" class=\"headerlink\" title=\"常见 command\"></a>常见 command</h3><p>C-c p f =&gt; projectile-find-file, 查找当前文件项目的一个文件。</p>\n<p>C-c p p =&gt; projectile-switch-project, 切换项目并查找那个项目中的文件。</p>\n<p>C-c p b =&gt; projectile-switch-to-buffer, 切换到项目内某一个 buffer。 假如不用 projectile，我们只能用 C-x b 切换buffer， 这时候提供候选的buffer会包含所有emacs打开了的buffer（最近使用的排在前面），那经常的我们只想切换到本项目内最近打开的某个buffer，假如用 C-x b 则多了很多干扰。</p>\n<p>C-c p I =&gt; projectile-ibuffer, 查看项目中打开了哪些buffer，并对某些buffer进行操作。</p>\n<p>C-c p ! =&gt; projectile-run-shell-command-in-root, 在项目根目录处运行一个shell命令。</p>\n<p>C-c p &amp; =&gt; projectile-run-async-shell-command-in-root, 异步运行shell命令。</p>\n<p>C-c p S =&gt; projectile-save-project-buffers, 保存本项目中所有打开的buffer。</p>\n<p>C-c p k =&gt; projectile-kill-buffers, 关闭本项目中所有打开的buffer。</p>\n<p>C-c p r =&gt; projectile-replace, 项目中批量替换文本。</p>\n<p>C-c p s g =&gt; projectile-grep, 项目中grep。</p>\n<p>C-c p 4 f =&gt; projectile-find-file-other-window, 在项目中查找文件并在另一个window中打开。</p>\n"},{"title":"My Favourite Emacs Modes - multiple-cursors","date":"2015-08-19T16:00:00.000Z","_content":"\n### multiple-cursors 解决的问题 ###\n\n通常编辑一个文件时只有一个光标（输入的位置）。multiple-cursors 实现了同时有多个光标，输入同时在这多个光标处发生。\n\n### 如何安装 ###\n\n{% codeblock lang:lisp %}\n(require-package 'multiple-cursors)\n{% endcodeblock %}\n\n### 常用命令 ###\n\nC-> => mc/mark-next-like-this, 寻找下一个与当前“选中”（region） 相匹配的文本并选中匹配并添加新光标；\n\nC-< => mc/mark-next-like-this, 类上，但是寻找方向相反；\n\nC-c C-< => mc/mark-all-like-this, 找到当前buffer中所有匹配并增加光标；\n\n完成编辑后按 <return> C-g 结束编辑，如果需要在multiple-cursors状态下输入换行，须使用 C-j, 因为 <return> 会结束编辑。\n\n### 对多行的region的操作 ###\n\nC-c c c => mc/edit-lines, 当前选中的region中的每一行增加一个cursor；\n\nC-c c e => mc/edit-ends-of-lines, 当前选中的region中的每一行的行尾增加一个cursor；\n\nC-c c a => mc/edit-beginnings-of-lines, 当前选中的region中的每一行的行首增加一个cursor；\n\n### 其他 ###\n\nmc/mark-all-in-region\n\nmc/mark-all-like-this-in-defun\n\nmc/mark-all-symbols-like-this-in-defun\n\nmc/insert-numbers\n\nmc/sort-regions\n\nmc/reverse-regions\n","source":"_posts/2015-08-20-emacs-multi-cursors.md","raw":"---\ntitle: \"My Favourite Emacs Modes - multiple-cursors\"\ndate: 2015-08-20 00:00:00\ntags: [emacs]\n---\n\n### multiple-cursors 解决的问题 ###\n\n通常编辑一个文件时只有一个光标（输入的位置）。multiple-cursors 实现了同时有多个光标，输入同时在这多个光标处发生。\n\n### 如何安装 ###\n\n{% codeblock lang:lisp %}\n(require-package 'multiple-cursors)\n{% endcodeblock %}\n\n### 常用命令 ###\n\nC-> => mc/mark-next-like-this, 寻找下一个与当前“选中”（region） 相匹配的文本并选中匹配并添加新光标；\n\nC-< => mc/mark-next-like-this, 类上，但是寻找方向相反；\n\nC-c C-< => mc/mark-all-like-this, 找到当前buffer中所有匹配并增加光标；\n\n完成编辑后按 <return> C-g 结束编辑，如果需要在multiple-cursors状态下输入换行，须使用 C-j, 因为 <return> 会结束编辑。\n\n### 对多行的region的操作 ###\n\nC-c c c => mc/edit-lines, 当前选中的region中的每一行增加一个cursor；\n\nC-c c e => mc/edit-ends-of-lines, 当前选中的region中的每一行的行尾增加一个cursor；\n\nC-c c a => mc/edit-beginnings-of-lines, 当前选中的region中的每一行的行首增加一个cursor；\n\n### 其他 ###\n\nmc/mark-all-in-region\n\nmc/mark-all-like-this-in-defun\n\nmc/mark-all-symbols-like-this-in-defun\n\nmc/insert-numbers\n\nmc/sort-regions\n\nmc/reverse-regions\n","slug":"emacs-multi-cursors","published":1,"updated":"2016-08-07T03:35:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirk26l6m000ljglm7ku7u48t","content":"<h3 id=\"multiple-cursors-解决的问题\"><a href=\"#multiple-cursors-解决的问题\" class=\"headerlink\" title=\"multiple-cursors 解决的问题\"></a>multiple-cursors 解决的问题</h3><p>通常编辑一个文件时只有一个光标（输入的位置）。multiple-cursors 实现了同时有多个光标，输入同时在这多个光标处发生。</p>\n<h3 id=\"如何安装\"><a href=\"#如何安装\" class=\"headerlink\" title=\"如何安装\"></a>如何安装</h3><figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"name\">require-package</span> 'multiple-cursors)</div></pre></td></tr></table></figure>\n<h3 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><p>C-&gt; =&gt; mc/mark-next-like-this, 寻找下一个与当前“选中”（region） 相匹配的文本并选中匹配并添加新光标；</p>\n<p>C-&lt; =&gt; mc/mark-next-like-this, 类上，但是寻找方向相反；</p>\n<p>C-c C-&lt; =&gt; mc/mark-all-like-this, 找到当前buffer中所有匹配并增加光标；</p>\n<p>完成编辑后按 <return> C-g 结束编辑，如果需要在multiple-cursors状态下输入换行，须使用 C-j, 因为 <return> 会结束编辑。</return></return></p>\n<h3 id=\"对多行的region的操作\"><a href=\"#对多行的region的操作\" class=\"headerlink\" title=\"对多行的region的操作\"></a>对多行的region的操作</h3><p>C-c c c =&gt; mc/edit-lines, 当前选中的region中的每一行增加一个cursor；</p>\n<p>C-c c e =&gt; mc/edit-ends-of-lines, 当前选中的region中的每一行的行尾增加一个cursor；</p>\n<p>C-c c a =&gt; mc/edit-beginnings-of-lines, 当前选中的region中的每一行的行首增加一个cursor；</p>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><p>mc/mark-all-in-region</p>\n<p>mc/mark-all-like-this-in-defun</p>\n<p>mc/mark-all-symbols-like-this-in-defun</p>\n<p>mc/insert-numbers</p>\n<p>mc/sort-regions</p>\n<p>mc/reverse-regions</p>\n","excerpt":"","more":"<h3 id=\"multiple-cursors-解决的问题\"><a href=\"#multiple-cursors-解决的问题\" class=\"headerlink\" title=\"multiple-cursors 解决的问题\"></a>multiple-cursors 解决的问题</h3><p>通常编辑一个文件时只有一个光标（输入的位置）。multiple-cursors 实现了同时有多个光标，输入同时在这多个光标处发生。</p>\n<h3 id=\"如何安装\"><a href=\"#如何安装\" class=\"headerlink\" title=\"如何安装\"></a>如何安装</h3><figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"name\">require-package</span> 'multiple-cursors)</div></pre></td></tr></table></figure>\n<h3 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><p>C-&gt; =&gt; mc/mark-next-like-this, 寻找下一个与当前“选中”（region） 相匹配的文本并选中匹配并添加新光标；</p>\n<p>C-&lt; =&gt; mc/mark-next-like-this, 类上，但是寻找方向相反；</p>\n<p>C-c C-&lt; =&gt; mc/mark-all-like-this, 找到当前buffer中所有匹配并增加光标；</p>\n<p>完成编辑后按 <return> C-g 结束编辑，如果需要在multiple-cursors状态下输入换行，须使用 C-j, 因为 <return> 会结束编辑。</p>\n<h3 id=\"对多行的region的操作\"><a href=\"#对多行的region的操作\" class=\"headerlink\" title=\"对多行的region的操作\"></a>对多行的region的操作</h3><p>C-c c c =&gt; mc/edit-lines, 当前选中的region中的每一行增加一个cursor；</p>\n<p>C-c c e =&gt; mc/edit-ends-of-lines, 当前选中的region中的每一行的行尾增加一个cursor；</p>\n<p>C-c c a =&gt; mc/edit-beginnings-of-lines, 当前选中的region中的每一行的行首增加一个cursor；</p>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><p>mc/mark-all-in-region</p>\n<p>mc/mark-all-like-this-in-defun</p>\n<p>mc/mark-all-symbols-like-this-in-defun</p>\n<p>mc/insert-numbers</p>\n<p>mc/sort-regions</p>\n<p>mc/reverse-regions</p>\n"},{"title":"机械式的工作与生活日志纪录","date":"2015-08-29T16:00:00.000Z","_content":"\n计算机系统的软件通常都有各自的日志文件。比如 Web 服务器 nginx 有如下格式的访问日志：\n\n```\n127.0.0.1 - - [13/Aug/2015:22:59:14 +0800] \"GET / HTTP/1.1\" 200 612 \"-\" \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_4) AppleWebKit/600.7.12 (KHTML, like Gecko) Version/8.0.7 Safari/600.7.12\"\n```\n```\n127.0.0.1 - - [13/Aug/2015:22:59:51 +0800] \"GET / HTTP/1.1\" 200 612 \"-\" \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_4) AppleWebKit/600.7.12 (KHTML, like Gecko) Version/8.0.7 Safari/600.7.12\"\n```\n\n\n\n这种日志有精确的格式：每一条日志占用一行，纪录的内容依次按照严格的顺序，依次是访问客户端的IP、访问的时间、请求的地址和协议、请求的返回码、请求的长度、等等。\n\n这种精确的格式带来的好处是方便机器（程序）阅读。我们可以方便的编写程序读取日志文件，从中找出一段时间内的日志，或者找出某一个IP的所有访问日志。对于某一类的信息，我们可以编写一个程序将日志内容进行过滤，以后就可以反复运行这个程序查看这一个特定的信息。方便我们查找问题和分析数据中隐藏的内在规律。总之，可以让我们更了解系统的运行情况。\n\n我们人类在工作和生活也很有必要使用类似的一种日志纪录方式。我列举几种可以纪录的日志内容：\n\n- 与某一个客户沟通后确定的事项，纪录时应该区分是哪个一个客户、沟通的时间、与谁沟通、确定了什么事项等；\n\n- 一个软件项目最近上线的新特性，纪录项目名称、上线时间、开发者、功能名称等；\n\n- 工作日志，帮同事做了某个小任务、写了什么文档、完成了某一个项目中某一个功能的开发、等等；\n\n- 生活日志，每天运动量、做了哪一项练习？、入睡和起床的时间、到公司的时间、下班时间、理发、甚至今天发现了某个好玩的事物或好吃的食物\n\n还有很多尚未想到的。\n\n日志的格式可以是这样的：\n\n```\n[2015-08-30 10:24:20] [api] task:\"员工消费纪录接口实现\" status:\"START\" remark:\"\"\n```\n```\n[2015-08-30 14:24:20] [api] task:\"员工消费纪录接口实现\" status:\"DONE\" remark:\"代码作了重构，需完整测试\"\n```\n```\n[2015-08-30 20:24:20] [sleep] start:\"2015-08-29 23:00:00\"\n```\n\n第一段是时间，第二段是类别。每一种工作都有一个独有的类别，比如 sleep 是我记录睡眠情况的日志，而 api 是记录\"开放平台接口\"项目的工作日志。\n\n所有类型的纪录都首先写入同一个文件中，然后有一个脚本定期（比如每日）抽取其中的不同类别，写入到不同的文件中。这样做的好处是，“写”这个动作可以做到最简化。我只需在我的编辑器中绑定一个快捷键，即可随时写任何类型的日志。\n\n把大脑从这些重复性的动作中解放出来。于是我也许就有了自己的第一个秘书了。\n","source":"_posts/2015-08-30-universal-event-logging.md","raw":"---\ntitle: \"机械式的工作与生活日志纪录\"\ndate: 2015-08-30 00:00:00\ntags: [inbox]\n---\n\n计算机系统的软件通常都有各自的日志文件。比如 Web 服务器 nginx 有如下格式的访问日志：\n\n```\n127.0.0.1 - - [13/Aug/2015:22:59:14 +0800] \"GET / HTTP/1.1\" 200 612 \"-\" \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_4) AppleWebKit/600.7.12 (KHTML, like Gecko) Version/8.0.7 Safari/600.7.12\"\n```\n```\n127.0.0.1 - - [13/Aug/2015:22:59:51 +0800] \"GET / HTTP/1.1\" 200 612 \"-\" \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_4) AppleWebKit/600.7.12 (KHTML, like Gecko) Version/8.0.7 Safari/600.7.12\"\n```\n\n\n\n这种日志有精确的格式：每一条日志占用一行，纪录的内容依次按照严格的顺序，依次是访问客户端的IP、访问的时间、请求的地址和协议、请求的返回码、请求的长度、等等。\n\n这种精确的格式带来的好处是方便机器（程序）阅读。我们可以方便的编写程序读取日志文件，从中找出一段时间内的日志，或者找出某一个IP的所有访问日志。对于某一类的信息，我们可以编写一个程序将日志内容进行过滤，以后就可以反复运行这个程序查看这一个特定的信息。方便我们查找问题和分析数据中隐藏的内在规律。总之，可以让我们更了解系统的运行情况。\n\n我们人类在工作和生活也很有必要使用类似的一种日志纪录方式。我列举几种可以纪录的日志内容：\n\n- 与某一个客户沟通后确定的事项，纪录时应该区分是哪个一个客户、沟通的时间、与谁沟通、确定了什么事项等；\n\n- 一个软件项目最近上线的新特性，纪录项目名称、上线时间、开发者、功能名称等；\n\n- 工作日志，帮同事做了某个小任务、写了什么文档、完成了某一个项目中某一个功能的开发、等等；\n\n- 生活日志，每天运动量、做了哪一项练习？、入睡和起床的时间、到公司的时间、下班时间、理发、甚至今天发现了某个好玩的事物或好吃的食物\n\n还有很多尚未想到的。\n\n日志的格式可以是这样的：\n\n```\n[2015-08-30 10:24:20] [api] task:\"员工消费纪录接口实现\" status:\"START\" remark:\"\"\n```\n```\n[2015-08-30 14:24:20] [api] task:\"员工消费纪录接口实现\" status:\"DONE\" remark:\"代码作了重构，需完整测试\"\n```\n```\n[2015-08-30 20:24:20] [sleep] start:\"2015-08-29 23:00:00\"\n```\n\n第一段是时间，第二段是类别。每一种工作都有一个独有的类别，比如 sleep 是我记录睡眠情况的日志，而 api 是记录\"开放平台接口\"项目的工作日志。\n\n所有类型的纪录都首先写入同一个文件中，然后有一个脚本定期（比如每日）抽取其中的不同类别，写入到不同的文件中。这样做的好处是，“写”这个动作可以做到最简化。我只需在我的编辑器中绑定一个快捷键，即可随时写任何类型的日志。\n\n把大脑从这些重复性的动作中解放出来。于是我也许就有了自己的第一个秘书了。\n","slug":"universal-event-logging","published":1,"updated":"2016-08-07T03:34:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirk26l6q000njglmmesk3qil","content":"<p>计算机系统的软件通常都有各自的日志文件。比如 Web 服务器 nginx 有如下格式的访问日志：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">127.0.0.1 - - [13/Aug/2015:22:59:14 +0800] &quot;GET / HTTP/1.1&quot; 200 612 &quot;-&quot; &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_4) AppleWebKit/600.7.12 (KHTML, like Gecko) Version/8.0.7 Safari/600.7.12&quot;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">127.0.0.1 - - [13/Aug/2015:22:59:51 +0800] &quot;GET / HTTP/1.1&quot; 200 612 &quot;-&quot; &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_4) AppleWebKit/600.7.12 (KHTML, like Gecko) Version/8.0.7 Safari/600.7.12&quot;</div></pre></td></tr></table></figure>\n<p>这种日志有精确的格式：每一条日志占用一行，纪录的内容依次按照严格的顺序，依次是访问客户端的IP、访问的时间、请求的地址和协议、请求的返回码、请求的长度、等等。</p>\n<p>这种精确的格式带来的好处是方便机器（程序）阅读。我们可以方便的编写程序读取日志文件，从中找出一段时间内的日志，或者找出某一个IP的所有访问日志。对于某一类的信息，我们可以编写一个程序将日志内容进行过滤，以后就可以反复运行这个程序查看这一个特定的信息。方便我们查找问题和分析数据中隐藏的内在规律。总之，可以让我们更了解系统的运行情况。</p>\n<p>我们人类在工作和生活也很有必要使用类似的一种日志纪录方式。我列举几种可以纪录的日志内容：</p>\n<ul>\n<li><p>与某一个客户沟通后确定的事项，纪录时应该区分是哪个一个客户、沟通的时间、与谁沟通、确定了什么事项等；</p>\n</li>\n<li><p>一个软件项目最近上线的新特性，纪录项目名称、上线时间、开发者、功能名称等；</p>\n</li>\n<li><p>工作日志，帮同事做了某个小任务、写了什么文档、完成了某一个项目中某一个功能的开发、等等；</p>\n</li>\n<li><p>生活日志，每天运动量、做了哪一项练习？、入睡和起床的时间、到公司的时间、下班时间、理发、甚至今天发现了某个好玩的事物或好吃的食物</p>\n</li>\n</ul>\n<p>还有很多尚未想到的。</p>\n<p>日志的格式可以是这样的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[2015-08-30 10:24:20] [api] task:&quot;员工消费纪录接口实现&quot; status:&quot;START&quot; remark:&quot;&quot;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[2015-08-30 14:24:20] [api] task:&quot;员工消费纪录接口实现&quot; status:&quot;DONE&quot; remark:&quot;代码作了重构，需完整测试&quot;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[2015-08-30 20:24:20] [sleep] start:&quot;2015-08-29 23:00:00&quot;</div></pre></td></tr></table></figure>\n<p>第一段是时间，第二段是类别。每一种工作都有一个独有的类别，比如 sleep 是我记录睡眠情况的日志，而 api 是记录”开放平台接口”项目的工作日志。</p>\n<p>所有类型的纪录都首先写入同一个文件中，然后有一个脚本定期（比如每日）抽取其中的不同类别，写入到不同的文件中。这样做的好处是，“写”这个动作可以做到最简化。我只需在我的编辑器中绑定一个快捷键，即可随时写任何类型的日志。</p>\n<p>把大脑从这些重复性的动作中解放出来。于是我也许就有了自己的第一个秘书了。</p>\n","excerpt":"","more":"<p>计算机系统的软件通常都有各自的日志文件。比如 Web 服务器 nginx 有如下格式的访问日志：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">127.0.0.1 - - [13/Aug/2015:22:59:14 +0800] &quot;GET / HTTP/1.1&quot; 200 612 &quot;-&quot; &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_4) AppleWebKit/600.7.12 (KHTML, like Gecko) Version/8.0.7 Safari/600.7.12&quot;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">127.0.0.1 - - [13/Aug/2015:22:59:51 +0800] &quot;GET / HTTP/1.1&quot; 200 612 &quot;-&quot; &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_4) AppleWebKit/600.7.12 (KHTML, like Gecko) Version/8.0.7 Safari/600.7.12&quot;</div></pre></td></tr></table></figure>\n<p>这种日志有精确的格式：每一条日志占用一行，纪录的内容依次按照严格的顺序，依次是访问客户端的IP、访问的时间、请求的地址和协议、请求的返回码、请求的长度、等等。</p>\n<p>这种精确的格式带来的好处是方便机器（程序）阅读。我们可以方便的编写程序读取日志文件，从中找出一段时间内的日志，或者找出某一个IP的所有访问日志。对于某一类的信息，我们可以编写一个程序将日志内容进行过滤，以后就可以反复运行这个程序查看这一个特定的信息。方便我们查找问题和分析数据中隐藏的内在规律。总之，可以让我们更了解系统的运行情况。</p>\n<p>我们人类在工作和生活也很有必要使用类似的一种日志纪录方式。我列举几种可以纪录的日志内容：</p>\n<ul>\n<li><p>与某一个客户沟通后确定的事项，纪录时应该区分是哪个一个客户、沟通的时间、与谁沟通、确定了什么事项等；</p>\n</li>\n<li><p>一个软件项目最近上线的新特性，纪录项目名称、上线时间、开发者、功能名称等；</p>\n</li>\n<li><p>工作日志，帮同事做了某个小任务、写了什么文档、完成了某一个项目中某一个功能的开发、等等；</p>\n</li>\n<li><p>生活日志，每天运动量、做了哪一项练习？、入睡和起床的时间、到公司的时间、下班时间、理发、甚至今天发现了某个好玩的事物或好吃的食物</p>\n</li>\n</ul>\n<p>还有很多尚未想到的。</p>\n<p>日志的格式可以是这样的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[2015-08-30 10:24:20] [api] task:&quot;员工消费纪录接口实现&quot; status:&quot;START&quot; remark:&quot;&quot;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[2015-08-30 14:24:20] [api] task:&quot;员工消费纪录接口实现&quot; status:&quot;DONE&quot; remark:&quot;代码作了重构，需完整测试&quot;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[2015-08-30 20:24:20] [sleep] start:&quot;2015-08-29 23:00:00&quot;</div></pre></td></tr></table></figure>\n<p>第一段是时间，第二段是类别。每一种工作都有一个独有的类别，比如 sleep 是我记录睡眠情况的日志，而 api 是记录”开放平台接口”项目的工作日志。</p>\n<p>所有类型的纪录都首先写入同一个文件中，然后有一个脚本定期（比如每日）抽取其中的不同类别，写入到不同的文件中。这样做的好处是，“写”这个动作可以做到最简化。我只需在我的编辑器中绑定一个快捷键，即可随时写任何类型的日志。</p>\n<p>把大脑从这些重复性的动作中解放出来。于是我也许就有了自己的第一个秘书了。</p>\n"},{"title":"机械式的任务管理","date":"2015-09-05T16:00:00.000Z","_content":"\n\n本文主要讲我遵循的这一套很机械的任务管理方法。\n\n每天的早晨，我会先把今天要做的事情列出来。然后排一个优先级，分为 A B C 三等。A 的优先级最高， B C 次之。A 优先级只选一件事情:今天开工后第一件要做的工作。B 优先级的任务可以有很多个，这些任务是这一天白天的主要工作。C 优先级的任务首先是那些计划了晚上要做的事情，然后也包括那些可以利用白天琐碎时间来完成的琐碎任务。\n\n早晨做一天的计划时，我评估每个任务的工作量。比如任务1我觉得需要花 20 分钟，我就对这个任务进行标记 \"Estimate: 0:20\"；而任务2我觉得很困难，需要花2小时，标记：\"Estimate: 2:00\"。所有任务都进行标记，看一下总时间。根据一段时间的观察，我已经很清楚自己的平均战斗力，一天的工作时间封顶也就5个半小时。因此所有任务加起来的时间如果超过6小时，我就很理性的把一些不那么紧急的任务延后：schedule 到后面的日子。\n\n然后就开始一天的工作。A 优先级的任务就是当前做的任务，每一个时刻有且只有一个 A 任务。A 任务会排在任务列表的最顶端，我也只专心解决它，其他任务都先抛在脑后。做完了标记为 DONE, 休息休息。然后从 B 优先级的任务中挑出下一个, 将它升级为 A 优先级，并开始解决。......依此循环。\n\n所有任务都要计时。基本上所有任务都是在电脑上完成，或者甚至都是在 Emacs 编辑器中完成, 因此计时是很容易的。计时也是必须的，因为：1. 我喜欢计时；2. 记录到的实际任务用时可以与我早晨的预估进行比较, 看看是高估了自己还是低估了自己（90%高估，极少低估）；3. 时间的使用可以作为对自己工作 review 的一个依据。\n\n当一天结束时，这一天的所有任务必须标记为 DONE 。也就是说没有跨天的任务存在。假如任务事实上跨了多天，那就拆分成多个：如\n\n* TODO [#B] learn bshaffer/oauth2-server-php (1)\n* TODO [#B] learn bshaffer/oauth2-server-php (2)\n* TODO [#B] learn bshaffer/oauth2-server-php (3)\n\n目的是保证在一天结束的时候，我可以看到干干净净任务列表：每一个都 DONE 了（强迫症得治。。）。另外跨天的任务也不方便作任务用时的预估（Estimate）。\n\n所有任务还需要加上一个或多个标签（tag）。比如 @gat 这个tag代表我在公司里做的那些任务 （gat是公司名字的缩写）。一个任务可以有多个标签（tag），所以 @gat 之后还可以加上项目标签，如 :@gat:wechat:code: 表示这个任务是公司里的微信项目的编码（coding）任务。通过这个标签机制，我的统计程序就可以很方便的统计我一段时间内做 wechat 这个项目花了多少时间。或者通过组合项目名和code标签，统计出我一段时间内在几个不同的项目上所花费的编码时间的比重。\n","source":"_posts/2015-09-06-how-i-work.md","raw":"---\ntitle: \"机械式的任务管理\"\ndate: 2015-09-06 00:00:00\ntags: [organize]\n---\n\n\n本文主要讲我遵循的这一套很机械的任务管理方法。\n\n每天的早晨，我会先把今天要做的事情列出来。然后排一个优先级，分为 A B C 三等。A 的优先级最高， B C 次之。A 优先级只选一件事情:今天开工后第一件要做的工作。B 优先级的任务可以有很多个，这些任务是这一天白天的主要工作。C 优先级的任务首先是那些计划了晚上要做的事情，然后也包括那些可以利用白天琐碎时间来完成的琐碎任务。\n\n早晨做一天的计划时，我评估每个任务的工作量。比如任务1我觉得需要花 20 分钟，我就对这个任务进行标记 \"Estimate: 0:20\"；而任务2我觉得很困难，需要花2小时，标记：\"Estimate: 2:00\"。所有任务都进行标记，看一下总时间。根据一段时间的观察，我已经很清楚自己的平均战斗力，一天的工作时间封顶也就5个半小时。因此所有任务加起来的时间如果超过6小时，我就很理性的把一些不那么紧急的任务延后：schedule 到后面的日子。\n\n然后就开始一天的工作。A 优先级的任务就是当前做的任务，每一个时刻有且只有一个 A 任务。A 任务会排在任务列表的最顶端，我也只专心解决它，其他任务都先抛在脑后。做完了标记为 DONE, 休息休息。然后从 B 优先级的任务中挑出下一个, 将它升级为 A 优先级，并开始解决。......依此循环。\n\n所有任务都要计时。基本上所有任务都是在电脑上完成，或者甚至都是在 Emacs 编辑器中完成, 因此计时是很容易的。计时也是必须的，因为：1. 我喜欢计时；2. 记录到的实际任务用时可以与我早晨的预估进行比较, 看看是高估了自己还是低估了自己（90%高估，极少低估）；3. 时间的使用可以作为对自己工作 review 的一个依据。\n\n当一天结束时，这一天的所有任务必须标记为 DONE 。也就是说没有跨天的任务存在。假如任务事实上跨了多天，那就拆分成多个：如\n\n* TODO [#B] learn bshaffer/oauth2-server-php (1)\n* TODO [#B] learn bshaffer/oauth2-server-php (2)\n* TODO [#B] learn bshaffer/oauth2-server-php (3)\n\n目的是保证在一天结束的时候，我可以看到干干净净任务列表：每一个都 DONE 了（强迫症得治。。）。另外跨天的任务也不方便作任务用时的预估（Estimate）。\n\n所有任务还需要加上一个或多个标签（tag）。比如 @gat 这个tag代表我在公司里做的那些任务 （gat是公司名字的缩写）。一个任务可以有多个标签（tag），所以 @gat 之后还可以加上项目标签，如 :@gat:wechat:code: 表示这个任务是公司里的微信项目的编码（coding）任务。通过这个标签机制，我的统计程序就可以很方便的统计我一段时间内做 wechat 这个项目花了多少时间。或者通过组合项目名和code标签，统计出我一段时间内在几个不同的项目上所花费的编码时间的比重。\n","slug":"how-i-work","published":1,"updated":"2016-08-07T03:34:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirk26l6r000qjglm3tygfvy6","content":"<p>本文主要讲我遵循的这一套很机械的任务管理方法。</p>\n<p>每天的早晨，我会先把今天要做的事情列出来。然后排一个优先级，分为 A B C 三等。A 的优先级最高， B C 次之。A 优先级只选一件事情:今天开工后第一件要做的工作。B 优先级的任务可以有很多个，这些任务是这一天白天的主要工作。C 优先级的任务首先是那些计划了晚上要做的事情，然后也包括那些可以利用白天琐碎时间来完成的琐碎任务。</p>\n<p>早晨做一天的计划时，我评估每个任务的工作量。比如任务1我觉得需要花 20 分钟，我就对这个任务进行标记 “Estimate: 0:20”；而任务2我觉得很困难，需要花2小时，标记：”Estimate: 2:00”。所有任务都进行标记，看一下总时间。根据一段时间的观察，我已经很清楚自己的平均战斗力，一天的工作时间封顶也就5个半小时。因此所有任务加起来的时间如果超过6小时，我就很理性的把一些不那么紧急的任务延后：schedule 到后面的日子。</p>\n<p>然后就开始一天的工作。A 优先级的任务就是当前做的任务，每一个时刻有且只有一个 A 任务。A 任务会排在任务列表的最顶端，我也只专心解决它，其他任务都先抛在脑后。做完了标记为 DONE, 休息休息。然后从 B 优先级的任务中挑出下一个, 将它升级为 A 优先级，并开始解决。……依此循环。</p>\n<p>所有任务都要计时。基本上所有任务都是在电脑上完成，或者甚至都是在 Emacs 编辑器中完成, 因此计时是很容易的。计时也是必须的，因为：1. 我喜欢计时；2. 记录到的实际任务用时可以与我早晨的预估进行比较, 看看是高估了自己还是低估了自己（90%高估，极少低估）；3. 时间的使用可以作为对自己工作 review 的一个依据。</p>\n<p>当一天结束时，这一天的所有任务必须标记为 DONE 。也就是说没有跨天的任务存在。假如任务事实上跨了多天，那就拆分成多个：如</p>\n<ul>\n<li>TODO [#B] learn bshaffer/oauth2-server-php (1)</li>\n<li>TODO [#B] learn bshaffer/oauth2-server-php (2)</li>\n<li>TODO [#B] learn bshaffer/oauth2-server-php (3)</li>\n</ul>\n<p>目的是保证在一天结束的时候，我可以看到干干净净任务列表：每一个都 DONE 了（强迫症得治。。）。另外跨天的任务也不方便作任务用时的预估（Estimate）。</p>\n<p>所有任务还需要加上一个或多个标签（tag）。比如 @gat 这个tag代表我在公司里做的那些任务 （gat是公司名字的缩写）。一个任务可以有多个标签（tag），所以 @gat 之后还可以加上项目标签，如 :@gat:wechat:code: 表示这个任务是公司里的微信项目的编码（coding）任务。通过这个标签机制，我的统计程序就可以很方便的统计我一段时间内做 wechat 这个项目花了多少时间。或者通过组合项目名和code标签，统计出我一段时间内在几个不同的项目上所花费的编码时间的比重。</p>\n","excerpt":"","more":"<p>本文主要讲我遵循的这一套很机械的任务管理方法。</p>\n<p>每天的早晨，我会先把今天要做的事情列出来。然后排一个优先级，分为 A B C 三等。A 的优先级最高， B C 次之。A 优先级只选一件事情:今天开工后第一件要做的工作。B 优先级的任务可以有很多个，这些任务是这一天白天的主要工作。C 优先级的任务首先是那些计划了晚上要做的事情，然后也包括那些可以利用白天琐碎时间来完成的琐碎任务。</p>\n<p>早晨做一天的计划时，我评估每个任务的工作量。比如任务1我觉得需要花 20 分钟，我就对这个任务进行标记 “Estimate: 0:20”；而任务2我觉得很困难，需要花2小时，标记：”Estimate: 2:00”。所有任务都进行标记，看一下总时间。根据一段时间的观察，我已经很清楚自己的平均战斗力，一天的工作时间封顶也就5个半小时。因此所有任务加起来的时间如果超过6小时，我就很理性的把一些不那么紧急的任务延后：schedule 到后面的日子。</p>\n<p>然后就开始一天的工作。A 优先级的任务就是当前做的任务，每一个时刻有且只有一个 A 任务。A 任务会排在任务列表的最顶端，我也只专心解决它，其他任务都先抛在脑后。做完了标记为 DONE, 休息休息。然后从 B 优先级的任务中挑出下一个, 将它升级为 A 优先级，并开始解决。……依此循环。</p>\n<p>所有任务都要计时。基本上所有任务都是在电脑上完成，或者甚至都是在 Emacs 编辑器中完成, 因此计时是很容易的。计时也是必须的，因为：1. 我喜欢计时；2. 记录到的实际任务用时可以与我早晨的预估进行比较, 看看是高估了自己还是低估了自己（90%高估，极少低估）；3. 时间的使用可以作为对自己工作 review 的一个依据。</p>\n<p>当一天结束时，这一天的所有任务必须标记为 DONE 。也就是说没有跨天的任务存在。假如任务事实上跨了多天，那就拆分成多个：如</p>\n<ul>\n<li>TODO [#B] learn bshaffer/oauth2-server-php (1)</li>\n<li>TODO [#B] learn bshaffer/oauth2-server-php (2)</li>\n<li>TODO [#B] learn bshaffer/oauth2-server-php (3)</li>\n</ul>\n<p>目的是保证在一天结束的时候，我可以看到干干净净任务列表：每一个都 DONE 了（强迫症得治。。）。另外跨天的任务也不方便作任务用时的预估（Estimate）。</p>\n<p>所有任务还需要加上一个或多个标签（tag）。比如 @gat 这个tag代表我在公司里做的那些任务 （gat是公司名字的缩写）。一个任务可以有多个标签（tag），所以 @gat 之后还可以加上项目标签，如 :@gat:wechat:code: 表示这个任务是公司里的微信项目的编码（coding）任务。通过这个标签机制，我的统计程序就可以很方便的统计我一段时间内做 wechat 这个项目花了多少时间。或者通过组合项目名和code标签，统计出我一段时间内在几个不同的项目上所花费的编码时间的比重。</p>\n"},{"title":"Git-rebase 误操作的恢复","date":"2015-09-26T16:00:00.000Z","_content":"\n\n我在进行一个 Git 的常用操作 - rebase 时，遇到了一个致命错误，导致开发分支上的commit丢失。慌张的同时，由于相信 Git 提供了保险措施，我找到了恢复丢失的 commit 的方法。这里记录一下。\n\n我进行的这个 rebase 操作是 Git 分支管理中很常见的一个操作：\n\n我在一个分支上做一个 feature 的开发，这个分支叫做：oauth2-login。另外有 master 分支与预发布的分支同步。当有一个功能需要快速开发并上线时，我会切换到 master 分支进行代码编写并合并到预发布分支，然后切换回当前的开发分支：oauth2-login。切过去之后需要将 master 的最新修改合并到 oauth2-login ，使用 git rebase master 来实现。当 rebase 时遇到冲突，需要将这些冲突的地方手动 fix， 并且 git add 然后 git rebase --continue。但是假如最后一步 没有用 continue， 而是用了 git rebase --skip，那就完蛋了，所有开发分支上未合并到 master 的 commit 统统丢失。\n\n这里就记录下丢失后如何找回。\n\nGit 并不会真的将那些已删除的commits从它的数据中删除，所以我的那些被不小心删除的commits仍旧保存在 Git 的数据文件中，在某个地方，我只需要把它们找出来。\n\n首先，需要查看 .git/logs/refs 目录， 在它下面会看到两个目录 heads 和 remotes。我们需要进入 .git/logs/refs/heads, 因为 remotes 保存的是 remote branch 的信息。在 .git/logs/refs/heads/ 目录下会看到一些和分支同名的文件。找到我操作的分支: oauth2-login, 打开查看其中内容。\n\n此文件中保存了我在此分支上的操作记录，也包括了我最近的那次rebase，从操作前head 对应的 commit 的 sha1 到 rebase 之后 head 对应的 commit 的 sha1 。\n那接下来的操作就变得十分简单：\n\n    $ git checkout -b oauth2-login-recovery foiwjfelajwldfj913s\n\n这个操作会以我rebase之前的head为base新建一个 branch，这个branch就包含了我所有丢失的commits。这样丢失的数据就找回来了。\n","source":"_posts/2015-09-27-recovery-from-a-disastrous-git-rebase-mistake.md","raw":"---\ntitle: \"Git-rebase 误操作的恢复\"\ndate: 2015-09-27 00:00:00\ntags: [git]\n---\n\n\n我在进行一个 Git 的常用操作 - rebase 时，遇到了一个致命错误，导致开发分支上的commit丢失。慌张的同时，由于相信 Git 提供了保险措施，我找到了恢复丢失的 commit 的方法。这里记录一下。\n\n我进行的这个 rebase 操作是 Git 分支管理中很常见的一个操作：\n\n我在一个分支上做一个 feature 的开发，这个分支叫做：oauth2-login。另外有 master 分支与预发布的分支同步。当有一个功能需要快速开发并上线时，我会切换到 master 分支进行代码编写并合并到预发布分支，然后切换回当前的开发分支：oauth2-login。切过去之后需要将 master 的最新修改合并到 oauth2-login ，使用 git rebase master 来实现。当 rebase 时遇到冲突，需要将这些冲突的地方手动 fix， 并且 git add 然后 git rebase --continue。但是假如最后一步 没有用 continue， 而是用了 git rebase --skip，那就完蛋了，所有开发分支上未合并到 master 的 commit 统统丢失。\n\n这里就记录下丢失后如何找回。\n\nGit 并不会真的将那些已删除的commits从它的数据中删除，所以我的那些被不小心删除的commits仍旧保存在 Git 的数据文件中，在某个地方，我只需要把它们找出来。\n\n首先，需要查看 .git/logs/refs 目录， 在它下面会看到两个目录 heads 和 remotes。我们需要进入 .git/logs/refs/heads, 因为 remotes 保存的是 remote branch 的信息。在 .git/logs/refs/heads/ 目录下会看到一些和分支同名的文件。找到我操作的分支: oauth2-login, 打开查看其中内容。\n\n此文件中保存了我在此分支上的操作记录，也包括了我最近的那次rebase，从操作前head 对应的 commit 的 sha1 到 rebase 之后 head 对应的 commit 的 sha1 。\n那接下来的操作就变得十分简单：\n\n    $ git checkout -b oauth2-login-recovery foiwjfelajwldfj913s\n\n这个操作会以我rebase之前的head为base新建一个 branch，这个branch就包含了我所有丢失的commits。这样丢失的数据就找回来了。\n","slug":"recovery-from-a-disastrous-git-rebase-mistake","published":1,"updated":"2016-08-07T03:34:37.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirk26l77001sjglmdv614xtr","content":"<p>我在进行一个 Git 的常用操作 - rebase 时，遇到了一个致命错误，导致开发分支上的commit丢失。慌张的同时，由于相信 Git 提供了保险措施，我找到了恢复丢失的 commit 的方法。这里记录一下。</p>\n<p>我进行的这个 rebase 操作是 Git 分支管理中很常见的一个操作：</p>\n<p>我在一个分支上做一个 feature 的开发，这个分支叫做：oauth2-login。另外有 master 分支与预发布的分支同步。当有一个功能需要快速开发并上线时，我会切换到 master 分支进行代码编写并合并到预发布分支，然后切换回当前的开发分支：oauth2-login。切过去之后需要将 master 的最新修改合并到 oauth2-login ，使用 git rebase master 来实现。当 rebase 时遇到冲突，需要将这些冲突的地方手动 fix， 并且 git add 然后 git rebase –continue。但是假如最后一步 没有用 continue， 而是用了 git rebase –skip，那就完蛋了，所有开发分支上未合并到 master 的 commit 统统丢失。</p>\n<p>这里就记录下丢失后如何找回。</p>\n<p>Git 并不会真的将那些已删除的commits从它的数据中删除，所以我的那些被不小心删除的commits仍旧保存在 Git 的数据文件中，在某个地方，我只需要把它们找出来。</p>\n<p>首先，需要查看 .git/logs/refs 目录， 在它下面会看到两个目录 heads 和 remotes。我们需要进入 .git/logs/refs/heads, 因为 remotes 保存的是 remote branch 的信息。在 .git/logs/refs/heads/ 目录下会看到一些和分支同名的文件。找到我操作的分支: oauth2-login, 打开查看其中内容。</p>\n<p>此文件中保存了我在此分支上的操作记录，也包括了我最近的那次rebase，从操作前head 对应的 commit 的 sha1 到 rebase 之后 head 对应的 commit 的 sha1 。<br>那接下来的操作就变得十分简单：</p>\n<pre><code>$ git checkout -b oauth2-login-recovery foiwjfelajwldfj913s\n</code></pre><p>这个操作会以我rebase之前的head为base新建一个 branch，这个branch就包含了我所有丢失的commits。这样丢失的数据就找回来了。</p>\n","excerpt":"","more":"<p>我在进行一个 Git 的常用操作 - rebase 时，遇到了一个致命错误，导致开发分支上的commit丢失。慌张的同时，由于相信 Git 提供了保险措施，我找到了恢复丢失的 commit 的方法。这里记录一下。</p>\n<p>我进行的这个 rebase 操作是 Git 分支管理中很常见的一个操作：</p>\n<p>我在一个分支上做一个 feature 的开发，这个分支叫做：oauth2-login。另外有 master 分支与预发布的分支同步。当有一个功能需要快速开发并上线时，我会切换到 master 分支进行代码编写并合并到预发布分支，然后切换回当前的开发分支：oauth2-login。切过去之后需要将 master 的最新修改合并到 oauth2-login ，使用 git rebase master 来实现。当 rebase 时遇到冲突，需要将这些冲突的地方手动 fix， 并且 git add 然后 git rebase –continue。但是假如最后一步 没有用 continue， 而是用了 git rebase –skip，那就完蛋了，所有开发分支上未合并到 master 的 commit 统统丢失。</p>\n<p>这里就记录下丢失后如何找回。</p>\n<p>Git 并不会真的将那些已删除的commits从它的数据中删除，所以我的那些被不小心删除的commits仍旧保存在 Git 的数据文件中，在某个地方，我只需要把它们找出来。</p>\n<p>首先，需要查看 .git/logs/refs 目录， 在它下面会看到两个目录 heads 和 remotes。我们需要进入 .git/logs/refs/heads, 因为 remotes 保存的是 remote branch 的信息。在 .git/logs/refs/heads/ 目录下会看到一些和分支同名的文件。找到我操作的分支: oauth2-login, 打开查看其中内容。</p>\n<p>此文件中保存了我在此分支上的操作记录，也包括了我最近的那次rebase，从操作前head 对应的 commit 的 sha1 到 rebase 之后 head 对应的 commit 的 sha1 。<br>那接下来的操作就变得十分简单：</p>\n<pre><code>$ git checkout -b oauth2-login-recovery foiwjfelajwldfj913s\n</code></pre><p>这个操作会以我rebase之前的head为base新建一个 branch，这个branch就包含了我所有丢失的commits。这样丢失的数据就找回来了。</p>\n"},{"title":"OSX 上的 VPN 环境配置指南","date":"2015-11-04T16:00:00.000Z","_content":"\n使用 VPN 主要是为了能正常访问被防火墙屏蔽的网站。\n\n但是在开发环境中并不希望所有IP段的访问都走VPN线路。所以使用VPN的情况有以下几个问题需要解决。\n\n1. 测试/开发环境的domain要被测试/开发环境的DNS服务器解析\n2. 避免测试/开发环境的domain走内网网关\n3. 国内网站使用不走VPN线路\n\n关于问题1。 可以通过设置VPN网络连接所使用的dns服务器来修改。\n\n关于问题2。OSX 上会自动做这个设置，内部网络 10.x.x.x 或 192.168.x.x 网段会自动连到本地网络的网关。但是如果测试环境并不在这些网段则需要在 /etc/ip-up 和 /etc/ip-down 中分别加入:\n\n{% codeblock bash %}\nroute add xxx.xxx.xxx.0/24 \"zzz.zzz.zzz.zzz\"\nroute add yyy.yyy.0.0/16 \"zzz.zzz.zzz.zzz\"\n{% endcodeblock %}\n\n和\n\n{% codeblock bash %}\nroute delete xxx.xxx.xxx.0/24 \"zzz.zzz.zzz.zzz\"\nroute delete yyy.yyy.0.0/16 \"zzz.zzz.zzz.zzz\"\n{% endcodeblock %}\n\n这里假设本地网络网关地址是 zzz.zzz.zzz.zzz\n\n\n关于问题3。可以使用chnroutes： https://code.google.com/p/chnroutes/ ，或这里  https://github.com/alsotang/ppp\n","source":"_posts/2015-11-05-vpn-conf-for-gfw.md","raw":"---\ntitle: \"OSX 上的 VPN 环境配置指南\"\ndate: 2015-11-05 00:00:00\ntags: [vpn, gfw, osx]\n---\n\n使用 VPN 主要是为了能正常访问被防火墙屏蔽的网站。\n\n但是在开发环境中并不希望所有IP段的访问都走VPN线路。所以使用VPN的情况有以下几个问题需要解决。\n\n1. 测试/开发环境的domain要被测试/开发环境的DNS服务器解析\n2. 避免测试/开发环境的domain走内网网关\n3. 国内网站使用不走VPN线路\n\n关于问题1。 可以通过设置VPN网络连接所使用的dns服务器来修改。\n\n关于问题2。OSX 上会自动做这个设置，内部网络 10.x.x.x 或 192.168.x.x 网段会自动连到本地网络的网关。但是如果测试环境并不在这些网段则需要在 /etc/ip-up 和 /etc/ip-down 中分别加入:\n\n{% codeblock bash %}\nroute add xxx.xxx.xxx.0/24 \"zzz.zzz.zzz.zzz\"\nroute add yyy.yyy.0.0/16 \"zzz.zzz.zzz.zzz\"\n{% endcodeblock %}\n\n和\n\n{% codeblock bash %}\nroute delete xxx.xxx.xxx.0/24 \"zzz.zzz.zzz.zzz\"\nroute delete yyy.yyy.0.0/16 \"zzz.zzz.zzz.zzz\"\n{% endcodeblock %}\n\n这里假设本地网络网关地址是 zzz.zzz.zzz.zzz\n\n\n关于问题3。可以使用chnroutes： https://code.google.com/p/chnroutes/ ，或这里  https://github.com/alsotang/ppp\n","slug":"vpn-conf-for-gfw","published":1,"updated":"2016-08-07T03:34:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirk26l78001tjglmtslnmq5t","content":"<p>使用 VPN 主要是为了能正常访问被防火墙屏蔽的网站。</p>\n<p>但是在开发环境中并不希望所有IP段的访问都走VPN线路。所以使用VPN的情况有以下几个问题需要解决。</p>\n<ol>\n<li>测试/开发环境的domain要被测试/开发环境的DNS服务器解析</li>\n<li>避免测试/开发环境的domain走内网网关</li>\n<li>国内网站使用不走VPN线路</li>\n</ol>\n<p>关于问题1。 可以通过设置VPN网络连接所使用的dns服务器来修改。</p>\n<p>关于问题2。OSX 上会自动做这个设置，内部网络 10.x.x.x 或 192.168.x.x 网段会自动连到本地网络的网关。但是如果测试环境并不在这些网段则需要在 /etc/ip-up 和 /etc/ip-down 中分别加入:</p>\n<figure class=\"highlight plain\"><figcaption><span>bash</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">route add xxx.xxx.xxx.0/24 &quot;zzz.zzz.zzz.zzz&quot;</div><div class=\"line\">route add yyy.yyy.0.0/16 &quot;zzz.zzz.zzz.zzz&quot;</div></pre></td></tr></table></figure>\n<p>和</p>\n<figure class=\"highlight plain\"><figcaption><span>bash</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">route delete xxx.xxx.xxx.0/24 &quot;zzz.zzz.zzz.zzz&quot;</div><div class=\"line\">route delete yyy.yyy.0.0/16 &quot;zzz.zzz.zzz.zzz&quot;</div></pre></td></tr></table></figure>\n<p>这里假设本地网络网关地址是 zzz.zzz.zzz.zzz</p>\n<p>关于问题3。可以使用chnroutes： <a href=\"https://code.google.com/p/chnroutes/\" target=\"_blank\" rel=\"external\">https://code.google.com/p/chnroutes/</a> ，或这里  <a href=\"https://github.com/alsotang/ppp\" target=\"_blank\" rel=\"external\">https://github.com/alsotang/ppp</a></p>\n","excerpt":"","more":"<p>使用 VPN 主要是为了能正常访问被防火墙屏蔽的网站。</p>\n<p>但是在开发环境中并不希望所有IP段的访问都走VPN线路。所以使用VPN的情况有以下几个问题需要解决。</p>\n<ol>\n<li>测试/开发环境的domain要被测试/开发环境的DNS服务器解析</li>\n<li>避免测试/开发环境的domain走内网网关</li>\n<li>国内网站使用不走VPN线路</li>\n</ol>\n<p>关于问题1。 可以通过设置VPN网络连接所使用的dns服务器来修改。</p>\n<p>关于问题2。OSX 上会自动做这个设置，内部网络 10.x.x.x 或 192.168.x.x 网段会自动连到本地网络的网关。但是如果测试环境并不在这些网段则需要在 /etc/ip-up 和 /etc/ip-down 中分别加入:</p>\n<figure class=\"highlight plain\"><figcaption><span>bash</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">route add xxx.xxx.xxx.0/24 &quot;zzz.zzz.zzz.zzz&quot;</div><div class=\"line\">route add yyy.yyy.0.0/16 &quot;zzz.zzz.zzz.zzz&quot;</div></pre></td></tr></table></figure>\n<p>和</p>\n<figure class=\"highlight plain\"><figcaption><span>bash</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">route delete xxx.xxx.xxx.0/24 &quot;zzz.zzz.zzz.zzz&quot;</div><div class=\"line\">route delete yyy.yyy.0.0/16 &quot;zzz.zzz.zzz.zzz&quot;</div></pre></td></tr></table></figure>\n<p>这里假设本地网络网关地址是 zzz.zzz.zzz.zzz</p>\n<p>关于问题3。可以使用chnroutes： <a href=\"https://code.google.com/p/chnroutes/\">https://code.google.com/p/chnroutes/</a> ，或这里  <a href=\"https://github.com/alsotang/ppp\">https://github.com/alsotang/ppp</a></p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cirk26l5u0000jglm2tgwcth0","tag_id":"cirk26l610002jglm576iqwz1","_id":"cirk26l6d000ajglm9xugp3q2"},{"post_id":"cirk26l5u0000jglm2tgwcth0","tag_id":"cirk26l670005jglm6frm2bjo","_id":"cirk26l6f000cjglm1s8x7fd9"},{"post_id":"cirk26l5z0001jglm1htioc7a","tag_id":"cirk26l610002jglm576iqwz1","_id":"cirk26l6o000mjglmyqznwk00"},{"post_id":"cirk26l5z0001jglm1htioc7a","tag_id":"cirk26l670005jglm6frm2bjo","_id":"cirk26l6r000ojglmkk24ibj8"},{"post_id":"cirk26l5z0001jglm1htioc7a","tag_id":"cirk26l6j000hjglmun4sw8uk","_id":"cirk26l6s000rjglmcwkjkwow"},{"post_id":"cirk26l630003jglmsiegnr9w","tag_id":"cirk26l6m000kjglm9sv1aw8t","_id":"cirk26l6u000tjglmqq8wi9rp"},{"post_id":"cirk26l630003jglmsiegnr9w","tag_id":"cirk26l6r000pjglmkpltwfs2","_id":"cirk26l6u000ujglm7dnd7y0a"},{"post_id":"cirk26l650004jglmc0t3xosp","tag_id":"cirk26l6t000sjglm72666z95","_id":"cirk26l6u000wjglmaylcy2hj"},{"post_id":"cirk26l680006jglm8awo6kog","tag_id":"cirk26l6u000vjglmjn4f17zm","_id":"cirk26l6v000yjglmd8zn30eg"},{"post_id":"cirk26l6a0007jglm427ppbqh","tag_id":"cirk26l6v000xjglmqqb9vs2y","_id":"cirk26l6v0010jglmgvi7kxk7"},{"post_id":"cirk26l6b0008jglmvutx5cc8","tag_id":"cirk26l6v000zjglm8f0xo3hm","_id":"cirk26l6x0012jglmhz29d9hu"},{"post_id":"cirk26l6d000bjglm4urajiec","tag_id":"cirk26l6v000zjglm8f0xo3hm","_id":"cirk26l6x0014jglmfiod68aa"},{"post_id":"cirk26l6f000djglmrt0l40zo","tag_id":"cirk26l6x0013jglmagup68f4","_id":"cirk26l6z0019jglmh3b7vaw4"},{"post_id":"cirk26l6f000djglmrt0l40zo","tag_id":"cirk26l6y0015jglm3o4mk1zs","_id":"cirk26l6z001ajglmjulplxyz"},{"post_id":"cirk26l6f000djglmrt0l40zo","tag_id":"cirk26l6y0016jglmmxmwvxd5","_id":"cirk26l70001cjglmoxieajc5"},{"post_id":"cirk26l6f000djglmrt0l40zo","tag_id":"cirk26l6z0017jglmu678sibw","_id":"cirk26l72001djglm3mfpz315"},{"post_id":"cirk26l6g000fjglmmsa77r2u","tag_id":"cirk26l6z0018jglmqse74dw2","_id":"cirk26l72001fjglm6sma5zpd"},{"post_id":"cirk26l6h000gjglmbcfv1pt6","tag_id":"cirk26l6t000sjglm72666z95","_id":"cirk26l73001hjglml81ia3pp"},{"post_id":"cirk26l6h000gjglmbcfv1pt6","tag_id":"cirk26l6z0017jglmu678sibw","_id":"cirk26l73001ijglmx5gpzhy1"},{"post_id":"cirk26l6k000ijglmvve97a60","tag_id":"cirk26l6x0013jglmagup68f4","_id":"cirk26l74001kjglmdw2ldhz5"},{"post_id":"cirk26l6l000jjglmorparsxk","tag_id":"cirk26l6x0013jglmagup68f4","_id":"cirk26l75001mjglm0g6rsasn"},{"post_id":"cirk26l6m000ljglm7ku7u48t","tag_id":"cirk26l6x0013jglmagup68f4","_id":"cirk26l75001ojglmmxztphdl"},{"post_id":"cirk26l6q000njglmmesk3qil","tag_id":"cirk26l75001njglmt7o9usbf","_id":"cirk26l76001qjglm3427sqd2"},{"post_id":"cirk26l6r000qjglm3tygfvy6","tag_id":"cirk26l76001pjglmu9f08qwx","_id":"cirk26l76001rjglmdzkj7ou3"},{"post_id":"cirk26l77001sjglmdv614xtr","tag_id":"cirk26l6t000sjglm72666z95","_id":"cirk26l79001ujglm3jap5tfg"},{"post_id":"cirk26l78001tjglmtslnmq5t","tag_id":"cirk26l79001vjglmycok4g5z","_id":"cirk26l7b001xjglmoa76223t"},{"post_id":"cirk26l78001tjglmtslnmq5t","tag_id":"cirk26l7a001wjglmo8bj6ti3","_id":"cirk26l7b001yjglmm5dk62i0"},{"post_id":"cirk26l78001tjglmtslnmq5t","tag_id":"cirk26l6y0015jglm3o4mk1zs","_id":"cirk26l7b001zjglm26iq0b4x"}],"Tag":[{"name":"om","_id":"cirk26l610002jglm576iqwz1"},{"name":"linux","_id":"cirk26l670005jglm6frm2bjo"},{"name":"ruby","_id":"cirk26l6j000hjglmun4sw8uk"},{"name":"iPad","_id":"cirk26l6m000kjglm9sv1aw8t"},{"name":"review","_id":"cirk26l6r000pjglmkpltwfs2"},{"name":"git","_id":"cirk26l6t000sjglm72666z95"},{"name":"essay","_id":"cirk26l6u000vjglmjn4f17zm"},{"name":"moco","_id":"cirk26l6v000xjglmqqb9vs2y"},{"name":"php","_id":"cirk26l6v000zjglm8f0xo3hm"},{"name":"emacs","_id":"cirk26l6x0013jglmagup68f4"},{"name":"osx","_id":"cirk26l6y0015jglm3o4mk1zs"},{"name":"mac","_id":"cirk26l6y0016jglmmxmwvxd5"},{"name":"software","_id":"cirk26l6z0017jglmu678sibw"},{"name":"jekyll","_id":"cirk26l6z0018jglmqse74dw2"},{"name":"inbox","_id":"cirk26l75001njglmt7o9usbf"},{"name":"organize","_id":"cirk26l76001pjglmu9f08qwx"},{"name":"vpn","_id":"cirk26l79001vjglmycok4g5z"},{"name":"gfw","_id":"cirk26l7a001wjglmo8bj6ti3"}]}}